import "Boombarrier.cif", "Trafficlight.cif", "J32.cif", "EmergencyCabinet.cif", "PushButton.cif", "Lighting.cif", "Ventilation.cif", "Smokedetection.cif", "EscapeDoor.cif", "Control.cif", "Lightsensor.cif", "CCTV.cif", "PopUp.cif", "Broadcast.cif", "Standstilldetection.cif", "ModeTraffictube.cif";

group def Traffictube():
  Boombarrier1: Boombarrier();
  Boombarrier2: Boombarrier();
  ControlBoombarriers: Control();
  ButtonStopBoombarriers: PushButton(ControlBoombarriers.Mode.manual, AccessBoombarriers.stopped, ControlBoombarriers.Mode.auto);
  ButtonOpenBoombarriers: PushButton(ControlBoombarriers.Mode.manual, AccessBoombarriers.opening, ControlBoombarriers.Mode.auto);
  ButtonCloseBoombarriers: PushButton(ControlBoombarriers.Mode.manual, AccessBoombarriers.closing, ControlBoombarriers.Mode.auto);
  ButtonCloseUnconditionalBoombarriers: PushButton(ControlBoombarriers.Mode.manual, AccessBoombarriers.closingUnconditionally, ControlBoombarriers.Mode.auto);
  AccessBoombarriers: AccessBoombarrier(ModeTraffictube.c_emergency, ModeTraffictube.c_support);

  Trafficlight1: Trafficlight();
  Trafficlight2: Trafficlight();
  Trafficlight3: Trafficlight();
  ControlTrafficlights: Control();
  ButtonRedTrafficlights: PushButton(ControlTrafficlights.Mode.manual, AccessTrafficlights.red, ControlTrafficlights.Mode.auto or ButtonFlashTrafficlights.Observer.pressed or ButtonOffTrafficlights.Observer.pressed);
  ButtonFlashTrafficlights: PushButton(ControlTrafficlights.Mode.manual, AccessTrafficlights.flash, ControlTrafficlights.Mode.auto or ButtonRedTrafficlights.Observer.pressed or ButtonOffTrafficlights.Observer.pressed);
  ButtonOffTrafficlights: PushButton(ControlTrafficlights.Mode.manual, AccessTrafficlights.off, ControlTrafficlights.Mode.auto);
  ButtonPrimaryRedTrafficlights: PushButton(not AccessTrafficlights.red, AccessTrafficlights.red, false);
  ButtonPrimaryOffTrafficlights: PushButton(not AccessTrafficlights.off, AccessTrafficlights.off, false);
  AccessTrafficlights: AccessTrafficlight(ModeTraffictube.c_emergency, ModeTraffictube.c_support);

  ButtonPrimaryCloseTraffictube: PushButton(not AccessTrafficlights.red or not AccessBoombarriers.closing, AccessTrafficlights.red and AccessBoombarriers.closing, false);
  ButtonPrimaryOpenTraffictube: PushButton(not AccessTrafficlights.off or not AccessBoombarriers.opening, AccessTrafficlights.off and AccessBoombarriers.opening, false);

  J32: ^J32();
  MatrixsignTrafficlight: Actuator(true,false);
  MatrixsignUnpressed: Actuator(true,false);

  Standstilldetection: ^Standstilldetection();
  EmergencyCabinetA: ^EmergencyCabinetA();
  EmergencyCabinetC: ^EmergencyCabinetC();
  Smokedetection: ^Smokedetection();

  Ventilation: ^Ventilation();
  VentilationEntrance: ^Ventilation();
  VentilationDirection: ^VentilationDirection();
  ControlVentilation: Control();
  ButtonVentilationDrivingDirection: PushButton(ControlVentilation.Mode.manual, VentilationDirection.drivingDirection, ControlVentilation.Mode.auto);
  ButtonVentilationAgainstDrivingDirection: PushButton(ControlVentilation.Mode.manual, VentilationDirection.againstDrivingDirection, ControlVentilation.Mode.auto);
  ButtonVentilation0: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=0 and VentilationEntrance.setting=0, ControlVentilation.Mode.auto);
  ButtonVentilation1: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=1 and VentilationEntrance.setting=1, ControlVentilation.Mode.auto);
  ButtonVentilation2: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=2 and VentilationEntrance.setting=2, ControlVentilation.Mode.auto);
  ButtonVentilation3: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=3 and VentilationEntrance.setting=3, ControlVentilation.Mode.auto);
  ButtonVentilation4: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=4 and VentilationEntrance.setting=4, ControlVentilation.Mode.auto);
  ButtonVentilation5: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=5 and VentilationEntrance.setting=5, ControlVentilation.Mode.auto);
  ButtonVentilation6: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=6 and VentilationEntrance.setting=6, ControlVentilation.Mode.auto);
  ButtonVentilation7: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=7 and VentilationEntrance.setting=7, ControlVentilation.Mode.auto);
  ButtonVentilation8: PushButton(ControlVentilation.Mode.manual, Ventilation.setting=8 and VentilationEntrance.setting=8, ControlVentilation.Mode.auto);

  Lightsensor: ^Lightsensor();
  Lighting: ^Lighting();
  ControlLighting: Control();
  ButtonLighting0: PushButton(ControlLighting.Mode.manual, Lighting.setting=0, ControlLighting.Mode.auto);
  ButtonLighting1: PushButton(ControlLighting.Mode.manual, Lighting.setting=1, ControlLighting.Mode.auto);
  ButtonLighting2: PushButton(ControlLighting.Mode.manual, Lighting.setting=2, ControlLighting.Mode.auto);
  ButtonLighting3: PushButton(ControlLighting.Mode.manual, Lighting.setting=3, ControlLighting.Mode.auto);
  ButtonLighting4: PushButton(ControlLighting.Mode.manual, Lighting.setting=4, ControlLighting.Mode.auto);
  ButtonLighting5: PushButton(ControlLighting.Mode.manual, Lighting.setting=5, ControlLighting.Mode.auto);
  ButtonLighting6: PushButton(ControlLighting.Mode.manual, Lighting.setting=6, ControlLighting.Mode.auto);
  ButtonLighting7: PushButton(ControlLighting.Mode.manual, Lighting.setting=7, ControlLighting.Mode.auto);
  ButtonLighting8: PushButton(ControlLighting.Mode.manual, Lighting.setting=8, ControlLighting.Mode.auto);

  CCTV: ^CCTV();
  Recorder: Actuator(true,false);
  ButtonCamera1: PushButton(true, CCTV.camera1 and ButtonCameraView.Observer.unpressed, false);
  ButtonCamera2: PushButton(true, CCTV.camera2 and ButtonCameraView.Observer.unpressed, false);
  ButtonCamera3: PushButton(true, CCTV.camera3 and ButtonCameraView.Observer.unpressed, false);
  ButtonCamera4: PushButton(true, CCTV.camera4 and ButtonCameraView.Observer.unpressed, false);
  ButtonCamera5: PushButton(true, CCTV.camera5 and ButtonCameraView.Observer.unpressed, false);
  ButtonCamera6: PushButton(true, CCTV.camera6 and ButtonCameraView.Observer.unpressed, false);
  ButtonCameraView: PushButton(true, ButtonCameraStopView.Observer.pressed, setCameraButtonPressed);
  ButtonCameraStopView: PushButton(ButtonCameraView.Observer.pressed, CCTV.off, false);
  TimerCameraViewEven: Timer();
  TimerCameraViewUneven: Timer();

  Broadcast: ^Broadcast();
  SwitchTimerAudio: SwitchTimer();
  ButtonMessage: PushButton(Broadcast.live, Broadcast.message and SwitchTimerAudio.off, false);
  ButtonLive: PushButton(not Broadcast.live, Broadcast.live, false);

  EscapeDoor: ^EscapeDoor(SwitchTimerAudio.off);

  ModeTraffictube: ^ModeTraffictube();

  PopUp: ^PopUp(ModeTraffictube.operational, ModeTraffictube.emergency);
  ButtonOperational: PushButton(ModeTraffictube.recovery or ModeTraffictube.standby or ModeTraffictube.maintenance, ModeTraffictube.operational, false);
  ButtonEmergency: PushButton(not ModeTraffictube.support, PopUp.Window.on or ModeTraffictube.emergency, false);
  ButtonEvacuation: PushButton(ModeTraffictube.emergency, ModeTraffictube.evacuation and not SwitchTimerAudio.off, false);
  ButtonRecovery: PushButton(ModeTraffictube.emergency or ModeTraffictube.maintenance, ModeTraffictube.recovery, false);
  ButtonMaintenance: PushButton(ModeTraffictube.operational or ModeTraffictube.recovery, ModeTraffictube.maintenance, ModeTraffictube.standby or ModeTraffictube.emergency);

  requirement PopUp.Window.c_on needs ButtonEmergency.Observer.pressed or
    (ModeTraffictube.operational
    and (not Standstilldetection.off)
    and (Smokedetection.setting > 3)
    and (EmergencyCabinetA.SensorOpen.on or EmergencyCabinetC.SensorOpen.on)
    and (EmergencyCabinetA.HandheldExtinguisher.on or EmergencyCabinetA.Firehose.on or EmergencyCabinetA.Phone.on
       or EmergencyCabinetC.HandheldExtinguisher.on or EmergencyCabinetC.Phone.on));
  requirement PopUp.Window.c_off needs ModeTraffictube.emergency or ModeTraffictube.support or PopUp.ButtonReject.Observer.pressed;
  requirement ModeTraffictube.c_operational needs ButtonOperational.Observer.pressed;
  requirement ModeTraffictube.c_emergency needs PopUp.ButtonAccept.Observer.pressed or PopUp.Timer.finished;
  requirement ModeTraffictube.c_evacuationEmergency needs ButtonEmergency.Observer.pressed;
  requirement ModeTraffictube.c_support needs not ModeTraffictube.emergency;
  requirement ModeTraffictube.c_standby needs Smokedetection.setting>3 or EmergencyCabinetA.HandheldExtinguisher.on or EmergencyCabinetA.Firehose.on or EmergencyCabinetC.HandheldExtinguisher.on;
  requirement ModeTraffictube.c_evacuation needs ButtonEvacuation.Observer.pressed;
  requirement ModeTraffictube.c_maintenance needs ButtonMaintenance.Observer.pressed;
  requirement AccessBoombarriers.c_open needs (ControlBoombarriers.Mode.manual and ButtonOpenBoombarriers.Observer.pressed) or ButtonPrimaryOpenTraffictube.Observer.pressed;
  requirement AccessBoombarriers.c_close needs (ControlBoombarriers.Mode.manual and ButtonCloseBoombarriers.Observer.pressed) or ButtonPrimaryCloseTraffictube.Observer.pressed;
  requirement AccessBoombarriers.c_closeUnconditionally needs (ControlBoombarriers.Mode.manual and ButtonCloseUnconditionalBoombarriers.Observer.pressed);
  requirement AccessBoombarriers.c_stop needs (ControlBoombarriers.Mode.manual and ButtonStopBoombarriers.Observer.pressed) or not AccessBoombarriers.closingUnconditionally and (Boombarrier1.ObstacleDetection.on or Boombarrier2.ObstacleDetection.on or (Boombarrier1.ActuatorDown.on and Boombarrier2.ActuatorDown.on and (Trafficlight1.ReleaseSignal.off or Trafficlight2.ReleaseSignal.off or Trafficlight3.ReleaseSignal.off)));
  requirement AccessTrafficlights.c_off needs (ControlTrafficlights.Mode.manual and ButtonOffTrafficlights.Observer.pressed) or ButtonPrimaryOffTrafficlights.Observer.pressed or ButtonPrimaryOpenTraffictube.Observer.pressed;
  requirement AccessTrafficlights.c_flash needs (ControlTrafficlights.Mode.manual and ButtonFlashTrafficlights.Observer.pressed);
  requirement AccessTrafficlights.c_red needs (ControlTrafficlights.Mode.manual and ButtonRedTrafficlights.Observer.pressed) or ButtonPrimaryRedTrafficlights.Observer.pressed or ButtonPrimaryCloseTraffictube.Observer.pressed;
  requirement J32.Mode.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash;
  requirement J32.Mode.c_off needs Trafficlight1.Mode.off;
  requirement J32.Mode.c_off needs Trafficlight2.Mode.off;
  requirement J32.Mode.c_off needs Trafficlight3.Mode.off;
  requirement J32.Mode.c_off needs AccessTrafficlights.off;
  requirement MatrixsignTrafficlight.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash or (AccessTrafficlights.off and not Trafficlight1.Mode.off and not Trafficlight2.Mode.off and not Trafficlight3.Mode.off);
  requirement MatrixsignTrafficlight.c_on needs not Trafficlight1.Mode.red;
  requirement MatrixsignTrafficlight.c_on needs not Trafficlight2.Mode.red;
  requirement MatrixsignTrafficlight.c_on needs not Trafficlight3.Mode.red;
  requirement MatrixsignTrafficlight.c_off needs Trafficlight1.Mode.red or Trafficlight2.Mode.red or Trafficlight3.Mode.red or (AccessTrafficlights.off and Trafficlight1.Mode.off and Trafficlight2.Mode.off and Trafficlight3.Mode.off);
  requirement MatrixsignUnpressed.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash;
  requirement MatrixsignUnpressed.c_off needs AccessTrafficlights.off;
  requirement MatrixsignUnpressed.c_off needs Trafficlight1.Mode.off;
  requirement MatrixsignUnpressed.c_off needs Trafficlight2.Mode.off;
  requirement MatrixsignUnpressed.c_off needs Trafficlight3.Mode.off;
  requirement VentilationDirection.c_againstDrivingDirection needs (ControlVentilation.Mode.auto and ModeTraffictube.support) or (ControlVentilation.Mode.manual and ButtonVentilationAgainstDrivingDirection.Observer.pressed);
  requirement VentilationDirection.c_drivingDirection needs (ControlVentilation.Mode.auto and not ModeTraffictube.support) or (ControlVentilation.Mode.manual and ButtonVentilationDrivingDirection.Observer.pressed);
  requirement Recorder.c_on needs ModeTraffictube.emergency or ModeTraffictube.evacuation or ModeTraffictube.support;
  requirement Recorder.c_off needs ModeTraffictube.operational or ModeTraffictube.recovery;
  requirement SwitchTimerAudio.c_on needs ButtonEvacuation.Observer.pressed;
  requirement SwitchTimerAudio.c_off needs not ModeTraffictube.evacuation;

  group def RequirementsBoombarrier(controllable event c_downOn, c_downOffEmergency, c_upOn, c_upOffEmergency; alg bool obstacleDetectionOn):
    requirement c_downOn needs Trafficlight1.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
    requirement c_downOn needs Trafficlight2.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
    requirement c_downOn needs Trafficlight3.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
    requirement c_downOn needs not obstacleDetectionOn or AccessBoombarriers.closingUnconditionally;
    requirement c_downOn needs AccessBoombarriers.closing or AccessBoombarriers.closingUnconditionally;
    requirement c_downOffEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.opening;
    requirement c_upOn needs AccessBoombarriers.opening;
    requirement c_upOffEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.closing;
  end
  RequirementsBoombarrier1: RequirementsBoombarrier(Boombarrier1.ActuatorDown.c_on, Boombarrier1.ActuatorDown.c_offEmergency, Boombarrier1.ActuatorUp.c_on, Boombarrier1.ActuatorUp.c_offEmergency, Boombarrier1.ObstacleDetection.on);
  RequirementsBoombarrier2: RequirementsBoombarrier(Boombarrier2.ActuatorDown.c_on, Boombarrier2.ActuatorDown.c_offEmergency, Boombarrier2.ActuatorUp.c_on, Boombarrier2.ActuatorUp.c_offEmergency, Boombarrier2.ObstacleDetection.on);

  group def RequirementsTrafficlight(controllable event c_flash, c_off, c_yellow; alg bool red, off):
    requirement red and not Boombarrier1.open disables c_flash;
    requirement red and not Boombarrier2.open disables c_flash;
    requirement J32.Mode.off disables c_flash;
    requirement off and not J32.TimerReleaseSignal.finished disables c_flash;
    requirement c_off needs AccessTrafficlights.off;
    requirement c_flash needs (red and AccessTrafficlights.off) or (off and AccessTrafficlights.red) or AccessTrafficlights.flash;
    requirement c_yellow needs AccessTrafficlights.red;
  end
  RequirementsTrafficlight1: RequirementsTrafficlight(Trafficlight1.Mode.c_flash, Trafficlight1.Mode.c_off, Trafficlight1.Mode.c_yellow, Trafficlight1.Mode.red, Trafficlight1.Mode.off);
  RequirementsTrafficlight2: RequirementsTrafficlight(Trafficlight2.Mode.c_flash, Trafficlight2.Mode.c_off, Trafficlight2.Mode.c_yellow, Trafficlight2.Mode.red, Trafficlight2.Mode.off);
  RequirementsTrafficlight3: RequirementsTrafficlight(Trafficlight3.Mode.c_flash, Trafficlight3.Mode.c_off, Trafficlight3.Mode.c_yellow, Trafficlight3.Mode.red, Trafficlight3.Mode.off);

  group def RequirementsVentilationEntrance(controllable event c_0, c_1, c_2, c_3, c_4, c_5, c_6, c_7, c_8):
    requirement c_0 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational and Smokedetection.setting=0) or ModeTraffictube.support)) or (ControlVentilation.Mode.manual and ButtonVentilation0.Observer.pressed);
    requirement c_1 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=1) or (ControlVentilation.Mode.manual and ButtonVentilation1.Observer.pressed);
    requirement c_2 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=2) or (ControlVentilation.Mode.manual and ButtonVentilation2.Observer.pressed);
    requirement c_3 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=3) or (ControlVentilation.Mode.manual and ButtonVentilation3.Observer.pressed);
    requirement c_4 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational and Smokedetection.setting=4) or ((ModeTraffictube.recovery or ModeTraffictube.maintenance) and Smokedetection.setting<5))) or (ControlVentilation.Mode.manual and ButtonVentilation4.Observer.pressed);
    requirement c_5 needs (ControlVentilation.Mode.auto and (ModeTraffictube.operational or ModeTraffictube.recovery) and Smokedetection.setting=5) or (ControlVentilation.Mode.manual and ButtonVentilation5.Observer.pressed);
    requirement c_6 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational or ModeTraffictube.recovery) and Smokedetection.setting=6) or (ModeTraffictube.standby and Smokedetection.setting<7)) or (ControlVentilation.Mode.manual and ButtonVentilation6.Observer.pressed);
    requirement c_7 needs (ControlVentilation.Mode.auto and (ModeTraffictube.operational or ModeTraffictube.recovery) and Smokedetection.setting=7) or (ControlVentilation.Mode.manual and ButtonVentilation7.Observer.pressed);
    requirement c_8 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational or ModeTraffictube.recovery) and Smokedetection.setting=8) or ModeTraffictube.emergency) or (ControlVentilation.Mode.manual and ButtonVentilation8.Observer.pressed);
  end
  RequirementsVentilation1: RequirementsVentilationEntrance(VentilationEntrance.c_0, VentilationEntrance.c_1, VentilationEntrance.c_2, VentilationEntrance.c_3, VentilationEntrance.c_4, VentilationEntrance.c_5, VentilationEntrance.c_6, VentilationEntrance.c_7, VentilationEntrance.c_8);

  group def RequirementsVentilation(controllable event c_0, c_1, c_2, c_3, c_4, c_5, c_6, c_7, c_8):
    requirement c_0 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=0) or (ControlVentilation.Mode.manual and ButtonVentilation0.Observer.pressed);
    requirement c_1 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=1) or (ControlVentilation.Mode.manual and ButtonVentilation1.Observer.pressed);
    requirement c_2 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=2) or (ControlVentilation.Mode.manual and ButtonVentilation2.Observer.pressed);
    requirement c_3 needs (ControlVentilation.Mode.auto and ModeTraffictube.operational and Smokedetection.setting=3) or (ControlVentilation.Mode.manual and ButtonVentilation3.Observer.pressed);
    requirement c_4 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational and Smokedetection.setting=4) or ((ModeTraffictube.recovery or ModeTraffictube.maintenance) and Smokedetection.setting<5))) or (ControlVentilation.Mode.manual and ButtonVentilation4.Observer.pressed);
    requirement c_5 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational) or ModeTraffictube.recovery) and Smokedetection.setting=5) or (ControlVentilation.Mode.manual and ButtonVentilation5.Observer.pressed);
    requirement c_6 needs (ControlVentilation.Mode.auto and (((ModeTraffictube.operational or ModeTraffictube.recovery) and Smokedetection.setting=6) or ((ModeTraffictube.support or ModeTraffictube.standby) and Smokedetection.setting<7))) or (ControlVentilation.Mode.manual and ButtonVentilation6.Observer.pressed);
    requirement c_7 needs (ControlVentilation.Mode.auto and (ModeTraffictube.operational or ModeTraffictube.recovery or ModeTraffictube.support) and Smokedetection.setting=7) or (ControlVentilation.Mode.manual and ButtonVentilation7.Observer.pressed);
    requirement c_8 needs (ControlVentilation.Mode.auto and ((ModeTraffictube.operational or ModeTraffictube.recovery or ModeTraffictube.support) and Smokedetection.setting=8) or ModeTraffictube.emergency) or (ControlVentilation.Mode.manual and ButtonVentilation8.Observer.pressed);
  end
  RequirementsVentilation2: RequirementsVentilation(Ventilation.c_0, Ventilation.c_1, Ventilation.c_2, Ventilation.c_3, Ventilation.c_4, Ventilation.c_5, Ventilation.c_6, Ventilation.c_7, Ventilation.c_8);

  alg bool setCameraButtonPressed = ButtonCamera1.Observer.pressed or ButtonCamera2.Observer.pressed or ButtonCamera3.Observer.pressed or ButtonCamera4.Observer.pressed or ButtonCamera5.Observer.pressed or ButtonCamera6.Observer.pressed;
  group def RequirementsCamera(controllable event c_cameraOn, c_cameraOff; alg bool cameraButtonPressed, cameraButtonUnpressed):
    requirement c_cameraOn needs cameraButtonPressed;
    requirement c_cameraOff needs setCameraButtonPressed;
    requirement c_cameraOff needs cameraButtonUnpressed;
  end
  RequirementsCamera1: RequirementsCamera(CCTV.c_on1, CCTV.c_off1, ButtonCamera1.Observer.pressed, ButtonCamera1.Observer.unpressed);
  RequirementsCamera2: RequirementsCamera(CCTV.c_on2, CCTV.c_off2, ButtonCamera2.Observer.pressed, ButtonCamera2.Observer.unpressed);
  RequirementsCamera3: RequirementsCamera(CCTV.c_on3, CCTV.c_off3, ButtonCamera3.Observer.pressed, ButtonCamera3.Observer.unpressed);
  RequirementsCamera4: RequirementsCamera(CCTV.c_on4, CCTV.c_off4, ButtonCamera4.Observer.pressed, ButtonCamera4.Observer.unpressed);
  RequirementsCamera5: RequirementsCamera(CCTV.c_on5, CCTV.c_off5, ButtonCamera5.Observer.pressed, ButtonCamera5.Observer.unpressed);
  RequirementsCamera6: RequirementsCamera(CCTV.c_on6, CCTV.c_off6, ButtonCamera6.Observer.pressed, ButtonCamera6.Observer.unpressed);

  requirement CCTV.c_start needs ButtonCameraView.Observer.pressed and ButtonCameraStopView.Observer.unpressed;
  requirement CCTV.c_stop needs ButtonCameraStopView.Observer.pressed;
  requirement CCTV.c_view needs ButtonCameraView.Observer.pressed;
  requirement CCTV.c_view needs ((TimerCameraViewEven.finished and TimerCameraViewUneven.off and (CCTV.camera2 or CCTV.camera4 or CCTV.camera6)));
  requirement TimerCameraViewEven.c_on needs CCTV.camera2 or CCTV.camera4 or CCTV.camera6;
  requirement TimerCameraViewEven.c_reset needs CCTV.camera1 or CCTV.camera3 or CCTV.camera5 or CCTV.off;
  requirement TimerCameraViewUneven.c_on needs CCTV.camera1 or CCTV.camera3 or CCTV.camera5;
  requirement TimerCameraViewUneven.c_reset needs CCTV.camera2 or CCTV.camera4 or CCTV.camera6 or CCTV.off;

  group def RequirementsLighting(controllable event c_0, c_1, c_2, c_3, c_4, c_5, c_6, c_7, c_8):
    requirement c_0 needs (ControlLighting.Mode.auto and ModeTraffictube.operational and Lightsensor.setting=0) or (ControlLighting.Mode.manual and ButtonLighting0.Observer.pressed);
    requirement c_1 needs (ControlLighting.Mode.auto and ModeTraffictube.operational and Lightsensor.setting=1) or (ControlLighting.Mode.manual and ButtonLighting1.Observer.pressed);
    requirement c_2 needs (ControlLighting.Mode.auto and ModeTraffictube.operational and Lightsensor.setting=2) or (ControlLighting.Mode.manual and ButtonLighting2.Observer.pressed);
    requirement c_3 needs (ControlLighting.Mode.auto and ModeTraffictube.operational and Lightsensor.setting=3) or (ControlLighting.Mode.manual and ButtonLighting3.Observer.pressed);
    requirement c_4 needs (ControlLighting.Mode.auto and (ModeTraffictube.operational and Lightsensor.setting=4) or ((ModeTraffictube.recovery or ModeTraffictube.maintenance) and Lightsensor.setting<5)) or (ControlLighting.Mode.manual and ButtonLighting4.Observer.pressed);
    requirement c_5 needs (ControlLighting.Mode.auto and (ModeTraffictube.operational or ModeTraffictube.recovery) and Lightsensor.setting=5) or (ControlLighting.Mode.manual and ButtonLighting5.Observer.pressed);
    requirement c_6 needs (ControlLighting.Mode.auto and ((ModeTraffictube.operational or ModeTraffictube.recovery) and Lightsensor.setting=6) or ((ModeTraffictube.support or ModeTraffictube.standby) and Lightsensor.setting<7)) or (ControlLighting.Mode.manual and ButtonLighting6.Observer.pressed);
    requirement c_7 needs (ControlLighting.Mode.auto and (ModeTraffictube.operational or ModeTraffictube.recovery or ModeTraffictube.support) and Lightsensor.setting=7) or (ControlLighting.Mode.manual and ButtonLighting7.Observer.pressed);
    requirement c_8 needs (ControlLighting.Mode.auto and (((ModeTraffictube.operational or ModeTraffictube.recovery or ModeTraffictube.support) and Lightsensor.setting=8) or ModeTraffictube.emergency)) or (ControlLighting.Mode.manual and ButtonLighting8.Observer.pressed);
  end
  RequirementsLighting1: RequirementsLighting(Lighting.c_0, Lighting.c_1, Lighting.c_2, Lighting.c_3, Lighting.c_4, Lighting.c_5, Lighting.c_6, Lighting.c_7, Lighting.c_8);

  group def RequirementsBroadcast(controllable event c_message, c_live, c_suppressed):
    requirement c_message needs EscapeDoor.Broadcast.off or EscapeDoor.Broadcast.suppressed;
    requirement c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
    requirement c_live needs EscapeDoor.Broadcast.off or EscapeDoor.Broadcast.suppressed;
    requirement c_live needs ButtonLive.Observer.pressed;
    requirement c_suppressed needs SwitchTimerAudio.on2;
  end
  RequirementsBroadcast1: RequirementsBroadcast(Broadcast.c_message, Broadcast.c_live, Broadcast.c_suppressed);

  group def RequirementsEscapeDoor(controllable event c_routeIndicationOn, c_routeIndicationOff, c_broadcastOn, c_broadcastOff, c_broadcastSuppressed; alg bool routeIndicationAuto, routeIndicationManual, buttonRouteIndicationOn, buttonRouteIndicationOff, broadcastAuto, buttonBroadcastOff, buttonBroadcastOn):
    requirement c_routeIndicationOn needs (routeIndicationAuto and ModeTraffictube.evacuation) or (routeIndicationManual and buttonRouteIndicationOn);
    requirement c_routeIndicationOff needs (routeIndicationAuto and not ModeTraffictube.evacuation) or (routeIndicationManual and buttonRouteIndicationOff);
    requirement c_broadcastOn needs (broadcastAuto and SwitchTimerAudio.on2) or (not broadcastAuto and buttonBroadcastOn);
    requirement c_broadcastOn needs Broadcast.suppressed;
    requirement c_broadcastOff needs (broadcastAuto and SwitchTimerAudio.off) or (not broadcastAuto and buttonBroadcastOff);
    requirement c_broadcastSuppressed needs (broadcastAuto and SwitchTimerAudio.on1);
  end
  RequirementsEscapeDoor1: RequirementsEscapeDoor(EscapeDoor.RouteIndication.c_on, EscapeDoor.RouteIndication.c_off, EscapeDoor.Broadcast.c_on, EscapeDoor.Broadcast.c_off, EscapeDoor.Broadcast.c_suppressed, EscapeDoor.ControlRouteIndication.Mode.auto, EscapeDoor.ControlRouteIndication.Mode.manual, EscapeDoor.ButtonRouteIndicationOn.Observer.pressed, EscapeDoor.ButtonRouteIndicationOff.Observer.pressed, EscapeDoor.ControlBroadcast.Mode.auto, EscapeDoor.ButtonBroadcastOff.Observer.pressed, EscapeDoor.ButtonBroadcastOn.Observer.pressed);
end
