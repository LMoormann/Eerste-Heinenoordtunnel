group Tunnel:
  uncontrollable u_broadcastStop;
  uncontrollable u_broadcastBothTubes;
  uncontrollable u_broadcastTraffictube1;
  uncontrollable u_broadcastTraffictube2;
  uncontrollable u_broadcastSection1;
  uncontrollable u_broadcastSection2;
  uncontrollable u_broadcastCamera1;
  uncontrollable u_broadcastCamera2;
  group Traffictube1:
    group Boombarrier1:
      group ActuatorUp:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group ActuatorDown:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group SensorOpen:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorClosed:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group Boombarrier2:
      group ActuatorUp:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group ActuatorDown:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group SensorOpen:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorClosed:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ControlBoombarriers:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonStopBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOpenBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonCloseBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonCloseUnconditionalBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group AccessBoombarriers:
      controllable c_open;
      controllable c_close;
      controllable c_closeUnconditionally;
      controllable c_stop;
    end
    group Trafficlight1:
      group Mode:
        controllable c_off;
        controllable c_yellow;
        controllable c_flash;
        controllable c_red;
      end
      group ReleaseSignal:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group Trafficlight2:
      group Mode:
        controllable c_off;
        controllable c_yellow;
        controllable c_flash;
        controllable c_red;
      end
      group ReleaseSignal:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group Trafficlight3:
      group Mode:
        controllable c_off;
        controllable c_yellow;
        controllable c_flash;
        controllable c_red;
      end
      group ReleaseSignal:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group ControlTrafficlights:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonRedTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonFlashTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOffTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPrimaryRedTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPrimaryOffTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group AccessTrafficlights:
      controllable c_off;
      controllable c_flash;
      controllable c_red;
    end
    group ButtonPrimaryCloseTraffictube:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPrimaryOpenTraffictube:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group J32:
      group Mode:
        controllable c_on;
        controllable c_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group MatrixsignTrafficlight:
      controllable c_on;
      controllable c_off;
    end
    group MatrixsignUnpressed:
      controllable c_on;
      controllable c_off;
    end
    group Ventilation1:
      controllable c_0;
      controllable c_1;
      controllable c_2;
      controllable c_3;
      controllable c_4;
      controllable c_5;
      controllable c_6;
      controllable c_7;
      controllable c_8;
    end
    group VentilationDirection:
      controllable c_drivingDirection;
      controllable c_againstDrivingDirection;
    end
    group ControlVentilation:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonVentilationDrivingDirection:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonVentilationAgainstDrivingDirection:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonVentilation0:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonVentilation1:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group Recorder:
      controllable c_on;
      controllable c_off;
    end
    group Broadcast1:
      controllable c_message;
      controllable c_live;
      controllable c_suppressed;
    end
    group SwitchTimerAudio:
      controllable c_on;
      controllable c_off;
      uncontrollable u_timeout;
    end
    group ButtonMessage:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonLive:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group EscapeDoor1:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor2:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor3:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor4:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor5:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor6:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor7:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoorBroadcast:
      controllable c_off;
      controllable c_on;
      controllable c_suppressed;
    end
    group ControlEscapeDoorBroadcast:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonEscapeDoorBroadcastOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEscapeDoorBroadcastOn:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ModeTraffictube:
      controllable c_operational;
      controllable c_emergency;
      controllable c_recovery;
      controllable c_support;
      controllable c_standby;
      controllable c_evacuation;
      controllable c_maintenance;
      controllable c_evacuationEmergency;
    end
    group PopUp:
      group Window:
        controllable c_on;
        controllable c_off;
      end
      group Timer:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
      group ButtonAccept:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonReject:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonOperational:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEmergency:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEvacuation:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonRecovery:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonMaintenance:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
  end
  group BroadcastButtons1:
    controllable c_off;
    controllable c_evacuation;
  end
  group HeadDrainCellar1:
    group Sensor1:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor2:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor3:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor4:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor5:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Pump1:
      controllable c_on;
      controllable c_off;
    end
    group Pump3:
      controllable c_on;
      controllable c_off;
    end
    group Regime:
      controllable c_store;
      controllable c_empty;
      controllable c_off;
    end
    group Control:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonStoring:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEmptying:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
  end
  group MiddleTunnelChannel:
    group ControlPressure:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonPressureOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPressureLeft:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPressureRight:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group Pressure1:
      controllable c_off;
      controllable c_left;
      controllable c_right;
    end
    group Pressure2:
      controllable c_off;
      controllable c_left;
      controllable c_right;
    end
    group Lighting:
      controllable c_on;
      controllable c_off;
    end
    group ControlLighting:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonLightingOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonLightingOn:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group DynamicEscaperouteIndication:
      controllable c_off;
      controllable c_upward;
      controllable c_downward;
    end
    group ControlDynamicEscaperouteIndication:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonDynamicEscaperouteIndicationOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonDynamicEscaperouteIndicationUpward:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonDynamicEscaperouteIndicationDownward:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group Broadcast:
      controllable c_off;
      controllable c_on;
      controllable c_onManual;
      controllable c_suppressed;
      controllable c_suppressedManual;
    end
    group ButtonStartMessage:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonStopMessage:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
  end
  group MiddleDrainCellar:
    group Sensor1:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor2:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor3:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor4:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor5:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Pump1:
      controllable c_on;
      controllable c_off;
    end
    group Pump2:
      controllable c_on;
      controllable c_off;
    end
    group PumpDirection:
      controllable c_headDrainCellar1;
      controllable c_headDrainCellar2;
    end
    group Regime:
      controllable c_store;
      controllable c_empty;
      controllable c_off;
    end
    group Control:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonStoring:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEmptying:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
  end
  group HeadDrainCellar2:
    group Sensor1:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor2:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor3:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor4:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Sensor5:
      uncontrollable u_on;
      uncontrollable u_off;
    end
    group Pump1:
      controllable c_on;
      controllable c_off;
    end
    group Pump3:
      controllable c_on;
      controllable c_off;
    end
    group Regime:
      controllable c_store;
      controllable c_empty;
      controllable c_off;
    end
    group Control:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonStoring:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEmptying:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
  end
  group Traffictube2:
    group Boombarrier1:
      group ActuatorUp:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group ActuatorDown:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group SensorOpen:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorClosed:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group Boombarrier2:
      group ActuatorUp:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group ActuatorDown:
        controllable c_on;
        controllable c_off;
        controllable c_offEmergency;
      end
      group SensorOpen:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorClosed:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ControlBoombarriers:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonStopBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOpenBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonCloseBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonCloseUnconditionalBoombarriers:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group AccessBoombarriers:
      controllable c_open;
      controllable c_close;
      controllable c_closeUnconditionally;
      controllable c_stop;
    end
    group Trafficlight1:
      group Mode:
        controllable c_off;
        controllable c_yellow;
        controllable c_flash;
        controllable c_red;
      end
      group ReleaseSignal:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group Trafficlight2:
      group Mode:
        controllable c_off;
        controllable c_yellow;
        controllable c_flash;
        controllable c_red;
      end
      group ReleaseSignal:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group Trafficlight3:
      group Mode:
        controllable c_off;
        controllable c_yellow;
        controllable c_flash;
        controllable c_red;
      end
      group ReleaseSignal:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group ControlTrafficlights:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonRedTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonFlashTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonOffTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPrimaryRedTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPrimaryOffTrafficlights:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group AccessTrafficlights:
      controllable c_off;
      controllable c_flash;
      controllable c_red;
    end
    group ButtonPrimaryCloseTraffictube:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonPrimaryOpenTraffictube:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group J32:
      group Mode:
        controllable c_on;
        controllable c_off;
      end
      group TimerReleaseSignal:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
    end
    group MatrixsignTrafficlight:
      controllable c_on;
      controllable c_off;
    end
    group MatrixsignUnpressed:
      controllable c_on;
      controllable c_off;
    end
    group Ventilation1:
      controllable c_0;
      controllable c_1;
      controllable c_2;
      controllable c_3;
      controllable c_4;
      controllable c_5;
      controllable c_6;
      controllable c_7;
      controllable c_8;
    end
    group VentilationDirection:
      controllable c_drivingDirection;
      controllable c_againstDrivingDirection;
    end
    group ControlVentilation:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonVentilationDrivingDirection:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonVentilationAgainstDrivingDirection:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonVentilation0:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonVentilation1:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group Recorder:
      controllable c_on;
      controllable c_off;
    end
    group Broadcast1:
      controllable c_message;
      controllable c_live;
      controllable c_suppressed;
    end
    group SwitchTimerAudio:
      controllable c_on;
      controllable c_off;
      uncontrollable u_timeout;
    end
    group ButtonMessage:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonLive:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group EscapeDoor1:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor2:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor3:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor4:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor5:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor6:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoor7:
      group RouteIndication:
        controllable c_on;
        controllable c_off;
      end
      group ControlRouteIndication:
        group Mode:
          controllable c_auto;
          controllable c_manual;
        end
        group ButtonManual:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
        group ButtonAuto:
          group Button:
            uncontrollable u_push;
          end
          group Observer:
            controllable c_done;
            controllable c_cancel;
          end
        end
      end
      group ButtonRouteIndicationOff:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonRouteIndicationOn:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group EscapeDoorBroadcast:
      controllable c_off;
      controllable c_on;
      controllable c_suppressed;
    end
    group ControlEscapeDoorBroadcast:
      group Mode:
        controllable c_auto;
        controllable c_manual;
      end
      group ButtonManual:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonAuto:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonEscapeDoorBroadcastOff:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEscapeDoorBroadcastOn:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ModeTraffictube:
      controllable c_operational;
      controllable c_emergency;
      controllable c_recovery;
      controllable c_support;
      controllable c_standby;
      controllable c_evacuation;
      controllable c_maintenance;
      controllable c_evacuationEmergency;
    end
    group PopUp:
      group Window:
        controllable c_on;
        controllable c_off;
      end
      group Timer:
        controllable c_on;
        controllable c_reset;
        uncontrollable u_timeout;
      end
      group ButtonAccept:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
      group ButtonReject:
        group Button:
          uncontrollable u_push;
        end
        group Observer:
          controllable c_done;
          controllable c_cancel;
        end
      end
    end
    group ButtonOperational:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEmergency:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonEvacuation:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonRecovery:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
    group ButtonMaintenance:
      group Button:
        uncontrollable u_push;
      end
      group Observer:
        controllable c_done;
        controllable c_cancel;
      end
    end
  end
end
group sup:
  group Tunnel:
    group Traffictube1:
      group Boombarrier1:
        alg bool open = SensorOpen.on and ActuatorUp.off and ActuatorDown.off;
        alg bool closed = SensorClosed.on and ActuatorUp.off and ActuatorDown.off;
        plant automaton ActuatorUp:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_off goto off;
            edge .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_offEmergency goto off;
        end
        plant automaton ActuatorDown:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_off goto off;
            edge .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_offEmergency goto off;
        end
        plant automaton SensorOpen:
          alg bool offInitial = false;
          alg bool offMarked = false;
          alg bool onMarked = true;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorOpen.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorOpen.u_off goto off;
        end
        plant automaton SensorClosed:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorClosed.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorClosed.u_off goto off;
        end
        plant automaton PhysicalRelation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorOpen.u_on when ActuatorUp.on and SensorClosed.off;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorClosed.u_off when ActuatorUp.on;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorOpen.u_off when ActuatorDown.on;
            edge .Tunnel.Traffictube1.Boombarrier1.SensorClosed.u_on when ActuatorDown.on and SensorOpen.off;
        end
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_on needs ActuatorDown.off;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_on needs not open;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_off needs SensorOpen.on;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on needs ActuatorUp.off;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on needs not closed;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_off needs SensorClosed.on;
      end
      group Boombarrier2:
        alg bool open = SensorOpen.on and ActuatorUp.off and ActuatorDown.off;
        alg bool closed = SensorClosed.on and ActuatorUp.off and ActuatorDown.off;
        plant automaton ActuatorUp:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_off goto off;
            edge .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_offEmergency goto off;
        end
        plant automaton ActuatorDown:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_off goto off;
            edge .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_offEmergency goto off;
        end
        plant automaton SensorOpen:
          alg bool offInitial = false;
          alg bool offMarked = false;
          alg bool onMarked = true;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorOpen.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorOpen.u_off goto off;
        end
        plant automaton SensorClosed:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorClosed.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorClosed.u_off goto off;
        end
        plant automaton PhysicalRelation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorOpen.u_on when ActuatorUp.on and SensorClosed.off;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorClosed.u_off when ActuatorUp.on;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorOpen.u_off when ActuatorDown.on;
            edge .Tunnel.Traffictube1.Boombarrier2.SensorClosed.u_on when ActuatorDown.on and SensorOpen.off;
        end
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_on needs ActuatorDown.off;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_on needs not open;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_off needs SensorOpen.on;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on needs ActuatorUp.off;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on needs not closed;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_off needs SensorClosed.on;
      end
      group ControlBoombarriers:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonStopBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.stopped;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonStopBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonStopBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonStopBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonStopBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonStopBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOpenBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.opening;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonOpenBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonOpenBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonOpenBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonOpenBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonOpenBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonCloseBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.closing;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonCloseBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonCloseBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonCloseBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonCloseBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonCloseBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonCloseUnconditionalBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.closingUnconditionally;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton AccessBoombarriers:
        monitor .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support;
        location stopped:
          initial;
          marked;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_open goto opening;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_close, .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support goto closing;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_closeUnconditionally goto closingUnconditionally;
        location opening:
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_close, .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support goto closing;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_closeUnconditionally goto closingUnconditionally;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_stop goto stopped;
        location closing:
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_open goto opening;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_stop goto stopped;
        location closingUnconditionally:
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_open goto opening;
          edge .Tunnel.Traffictube1.AccessBoombarriers.c_stop goto stopped;
      end
      group Trafficlight1:
        plant automaton Mode:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash goto flash;
          location flash:
            edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_off goto off;
            edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_yellow goto yellow;
          location yellow:
            edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash goto flash;
            edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_red goto red;
          location red:
            edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash goto flash;
        end
        plant automaton ReleaseSignal:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Trafficlight1.ReleaseSignal.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Trafficlight1.ReleaseSignal.u_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_reset goto off;
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight1.ReleaseSignal.u_on when Mode.red and TimerReleaseSignal.finished;
            edge .Tunnel.Traffictube1.Trafficlight1.ReleaseSignal.u_off when not Mode.red;
        end
        requirement invariant .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_on needs Mode.red;
        requirement invariant .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_reset needs not Mode.red;
      end
      group Trafficlight2:
        plant automaton Mode:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash goto flash;
          location flash:
            edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_off goto off;
            edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_yellow goto yellow;
          location yellow:
            edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash goto flash;
            edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_red goto red;
          location red:
            edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash goto flash;
        end
        plant automaton ReleaseSignal:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Trafficlight2.ReleaseSignal.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Trafficlight2.ReleaseSignal.u_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_reset goto off;
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight2.ReleaseSignal.u_on when Mode.red and TimerReleaseSignal.finished;
            edge .Tunnel.Traffictube1.Trafficlight2.ReleaseSignal.u_off when not Mode.red;
        end
        requirement invariant .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_on needs Mode.red;
        requirement invariant .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_reset needs not Mode.red;
      end
      group Trafficlight3:
        plant automaton Mode:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash goto flash;
          location flash:
            edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_off goto off;
            edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_yellow goto yellow;
          location yellow:
            edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash goto flash;
            edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_red goto red;
          location red:
            edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash goto flash;
        end
        plant automaton ReleaseSignal:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube1.Trafficlight3.ReleaseSignal.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube1.Trafficlight3.ReleaseSignal.u_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_reset goto off;
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.Trafficlight3.ReleaseSignal.u_on when Mode.red and TimerReleaseSignal.finished;
            edge .Tunnel.Traffictube1.Trafficlight3.ReleaseSignal.u_off when not Mode.red;
        end
        requirement invariant .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_on needs Mode.red;
        requirement invariant .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_reset needs not Mode.red;
      end
      group ControlTrafficlights:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonRedTrafficlights:
        alg bool conditionPush = ControlTrafficlights.Mode.manual;
        alg bool conditionDone = AccessTrafficlights.red;
        alg bool conditionCancel = ControlTrafficlights.Mode.auto or ButtonFlashTrafficlights.Observer.pressed or ButtonOffTrafficlights.Observer.pressed;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonRedTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonRedTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonRedTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonRedTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonRedTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonFlashTrafficlights:
        alg bool conditionPush = ControlTrafficlights.Mode.manual;
        alg bool conditionDone = AccessTrafficlights.flash;
        alg bool conditionCancel = ControlTrafficlights.Mode.auto or ButtonRedTrafficlights.Observer.pressed or ButtonOffTrafficlights.Observer.pressed;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonFlashTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonFlashTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonFlashTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonFlashTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonFlashTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOffTrafficlights:
        alg bool conditionPush = ControlTrafficlights.Mode.manual;
        alg bool conditionDone = AccessTrafficlights.off;
        alg bool conditionCancel = ControlTrafficlights.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonOffTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonOffTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonOffTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonOffTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonOffTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPrimaryRedTrafficlights:
        alg bool conditionPush = not AccessTrafficlights.red;
        alg bool conditionDone = AccessTrafficlights.red;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPrimaryOffTrafficlights:
        alg bool conditionPush = not AccessTrafficlights.off;
        alg bool conditionDone = AccessTrafficlights.off;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton AccessTrafficlights:
        monitor .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support;
        location off:
          initial;
          marked;
          edge .Tunnel.Traffictube1.AccessTrafficlights.c_red, .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support goto red;
          edge .Tunnel.Traffictube1.AccessTrafficlights.c_flash goto flash;
        location flash:
          edge .Tunnel.Traffictube1.AccessTrafficlights.c_red, .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support goto red;
          edge .Tunnel.Traffictube1.AccessTrafficlights.c_off goto off;
        location red:
          edge .Tunnel.Traffictube1.AccessTrafficlights.c_off goto off;
          edge .Tunnel.Traffictube1.AccessTrafficlights.c_flash goto flash;
      end
      group ButtonPrimaryCloseTraffictube:
        alg bool conditionPush = not AccessTrafficlights.red or not AccessBoombarriers.closing;
        alg bool conditionDone = AccessTrafficlights.red and AccessBoombarriers.closing;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPrimaryOpenTraffictube:
        alg bool conditionPush = not AccessTrafficlights.off or not AccessBoombarriers.opening;
        alg bool conditionDone = AccessTrafficlights.off and AccessBoombarriers.opening;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group J32:
        plant automaton Mode:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.J32.Mode.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.J32.Mode.c_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube1.J32.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_reset goto off;
        end
        requirement invariant .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_on needs Mode.on;
        requirement invariant .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_reset needs Mode.off;
      end
      plant automaton MatrixsignTrafficlight:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.Traffictube1.MatrixsignTrafficlight.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.Traffictube1.MatrixsignTrafficlight.c_off goto off;
      end
      plant automaton MatrixsignUnpressed:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.Traffictube1.MatrixsignUnpressed.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.Traffictube1.MatrixsignUnpressed.c_off goto off;
      end
      plant automaton Ventilation1:
        disc int[0..8] setting = 0;
        location:
          initial;
          marked;
          edge .Tunnel.Traffictube1.Ventilation1.c_0 when not(setting = 0) do setting := 0;
          edge .Tunnel.Traffictube1.Ventilation1.c_1 when not(setting = 1) do setting := 1;
          edge .Tunnel.Traffictube1.Ventilation1.c_2 when not(setting = 2) do setting := 2;
          edge .Tunnel.Traffictube1.Ventilation1.c_3 when not(setting = 3) do setting := 3;
          edge .Tunnel.Traffictube1.Ventilation1.c_4 when not(setting = 4) do setting := 4;
          edge .Tunnel.Traffictube1.Ventilation1.c_5 when not(setting = 5) do setting := 5;
          edge .Tunnel.Traffictube1.Ventilation1.c_6 when not(setting = 6) do setting := 6;
          edge .Tunnel.Traffictube1.Ventilation1.c_7 when not(setting = 7) do setting := 7;
          edge .Tunnel.Traffictube1.Ventilation1.c_8 when not(setting = 8) do setting := 8;
      end
      plant automaton VentilationDirection:
        location drivingDirection:
          initial;
          marked;
          edge .Tunnel.Traffictube1.VentilationDirection.c_againstDrivingDirection goto againstDrivingDirection;
        location againstDrivingDirection:
          edge .Tunnel.Traffictube1.VentilationDirection.c_drivingDirection goto drivingDirection;
      end
      group ControlVentilation:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ControlVentilation.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube1.ControlVentilation.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube1.ControlVentilation.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.ControlVentilation.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonVentilationDrivingDirection:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = VentilationDirection.drivingDirection;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonVentilationAgainstDrivingDirection:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = VentilationDirection.againstDrivingDirection;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonVentilation0:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = Ventilation1.setting = 0;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilation0.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonVentilation0.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilation0.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilation0.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonVentilation0.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonVentilation1:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = Ventilation1.setting = 1;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilation1.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonVentilation1.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilation1.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonVentilation1.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonVentilation1.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton Recorder:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.Traffictube1.Recorder.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.Traffictube1.Recorder.c_off goto off;
      end
      plant automaton Broadcast1:
        location message:
          initial;
          marked;
          edge .Tunnel.Traffictube1.Broadcast1.c_live goto live;
          edge .Tunnel.Traffictube1.Broadcast1.c_suppressed goto suppressed;
        location live:
          edge .Tunnel.Traffictube1.Broadcast1.c_message goto message;
        location suppressed:
          edge .Tunnel.Traffictube1.Broadcast1.c_message goto message;
          edge .Tunnel.Traffictube1.Broadcast1.c_live goto live;
      end
      plant automaton SwitchTimerAudio:
        location off:
          initial;
          marked;
          edge .Tunnel.Traffictube1.SwitchTimerAudio.c_on goto on1;
        location on1:
          edge .Tunnel.Traffictube1.SwitchTimerAudio.c_off goto off;
          edge .Tunnel.Traffictube1.SwitchTimerAudio.u_timeout goto on2;
        location on2:
          edge .Tunnel.Traffictube1.SwitchTimerAudio.c_off goto off;
          edge .Tunnel.Traffictube1.SwitchTimerAudio.u_timeout goto on1;
      end
      group ButtonMessage:
        alg bool conditionPush = Broadcast1.live;
        alg bool conditionDone = Broadcast1.message and SwitchTimerAudio.off;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonMessage.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonMessage.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonMessage.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonMessage.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonMessage.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonLive:
        alg bool conditionPush = not Broadcast1.live;
        alg bool conditionDone = Broadcast1.live;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonLive.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonLive.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonLive.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonLive.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonLive.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group EscapeDoor1:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor2:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor3:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor4:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor5:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor6:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor7:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      plant automaton EscapeDoorBroadcast:
        location off:
          initial;
          marked;
          edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_on goto on;
          edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_suppressed goto suppressed;
        location on:
          edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_off goto off;
          edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_suppressed goto suppressed;
        location suppressed:
          edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_off goto off;
          edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_on goto on;
      end
      group ControlEscapeDoorBroadcast:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonEscapeDoorBroadcastOff:
        alg bool conditionPush = ControlEscapeDoorBroadcast.Mode.manual;
        alg bool conditionDone = EscapeDoorBroadcast.off and SwitchTimerAudio.off;
        alg bool conditionCancel = ControlEscapeDoorBroadcast.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEscapeDoorBroadcastOn:
        alg bool conditionPush = ControlEscapeDoorBroadcast.Mode.manual;
        alg bool conditionDone = EscapeDoorBroadcast.on;
        alg bool conditionCancel = ControlEscapeDoorBroadcast.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton ModeTraffictube:
        location operational:
          initial;
          marked;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_emergency goto emergency;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_standby goto standby;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_maintenance goto maintenance;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_support goto support;
        location standby:
          edge .Tunnel.Traffictube1.ModeTraffictube.c_operational goto operational;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_emergency goto emergency;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_support goto support;
        location emergency:
          edge .Tunnel.Traffictube1.ModeTraffictube.c_recovery goto recovery;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_evacuation goto evacuation;
        location evacuation:
          edge .Tunnel.Traffictube1.ModeTraffictube.c_evacuationEmergency goto emergency;
        location recovery:
          edge .Tunnel.Traffictube1.ModeTraffictube.c_operational goto operational;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_emergency goto emergency;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_support goto support;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_maintenance goto maintenance;
        location support:
          edge .Tunnel.Traffictube1.ModeTraffictube.c_recovery goto recovery;
        location maintenance:
          edge .Tunnel.Traffictube1.ModeTraffictube.c_operational goto operational;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_recovery goto recovery;
          edge .Tunnel.Traffictube1.ModeTraffictube.c_support goto support;
      end
      group PopUp:
        plant automaton Window:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube1.PopUp.Window.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube1.PopUp.Window.c_off goto off;
        end
        plant automaton Timer:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube1.PopUp.Timer.c_on goto running;
          location running:
            edge .Tunnel.Traffictube1.PopUp.Timer.c_reset goto off;
            edge .Tunnel.Traffictube1.PopUp.Timer.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube1.PopUp.Timer.c_reset goto off;
        end
        group ButtonAccept:
          alg bool conditionPush = true;
          alg bool conditionDone = ModeTraffictube.emergency and Window.off;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.PopUp.ButtonAccept.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonReject:
          alg bool conditionPush = true;
          alg bool conditionDone = ModeTraffictube.operational and Window.off;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube1.PopUp.ButtonReject.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube1.PopUp.ButtonReject.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube1.PopUp.ButtonReject.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube1.PopUp.ButtonReject.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube1.PopUp.ButtonReject.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Button.u_push when Window.on;
            edge .Tunnel.Traffictube1.PopUp.ButtonReject.Button.u_push when Window.on;
        end
        requirement invariant .Tunnel.Traffictube1.PopUp.Window.c_on needs ButtonAccept.Observer.unpressed;
        requirement invariant .Tunnel.Traffictube1.PopUp.Window.c_on needs ButtonReject.Observer.unpressed;
        requirement invariant .Tunnel.Traffictube1.PopUp.Window.c_off needs ButtonAccept.Observer.pressed or ButtonReject.Observer.pressed or Timer.finished;
        requirement invariant .Tunnel.Traffictube1.PopUp.Timer.c_on needs Window.on;
        requirement invariant .Tunnel.Traffictube1.PopUp.Timer.c_reset needs Window.off;
      end
      group ButtonOperational:
        alg bool conditionPush = ModeTraffictube.recovery or ModeTraffictube.standby or ModeTraffictube.maintenance;
        alg bool conditionDone = ModeTraffictube.operational;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonOperational.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonOperational.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonOperational.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonOperational.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonOperational.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEmergency:
        alg bool conditionPush = not ModeTraffictube.support;
        alg bool conditionDone = PopUp.Window.on or ModeTraffictube.emergency;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEmergency.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonEmergency.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEmergency.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonEmergency.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonEmergency.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEvacuation:
        alg bool conditionPush = ModeTraffictube.emergency;
        alg bool conditionDone = ModeTraffictube.evacuation and not SwitchTimerAudio.off;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEvacuation.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonEvacuation.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonEvacuation.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonEvacuation.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonEvacuation.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonRecovery:
        alg bool conditionPush = ModeTraffictube.emergency or ModeTraffictube.maintenance;
        alg bool conditionDone = ModeTraffictube.recovery;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonRecovery.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonRecovery.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonRecovery.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonRecovery.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonRecovery.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonMaintenance:
        alg bool conditionPush = ModeTraffictube.operational or ModeTraffictube.recovery;
        alg bool conditionDone = ModeTraffictube.maintenance;
        alg bool conditionCancel = ModeTraffictube.standby or ModeTraffictube.emergency;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonMaintenance.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube1.ButtonMaintenance.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube1.ButtonMaintenance.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube1.ButtonMaintenance.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube1.ButtonMaintenance.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group RequirementsBoombarrier1:
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on needs Trafficlight1.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on needs Trafficlight2.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on needs Trafficlight3.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on needs AccessBoombarriers.closing or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_on needs AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.closing;
      end
      group RequirementsBoombarrier2:
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on needs Trafficlight1.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on needs Trafficlight2.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on needs Trafficlight3.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on needs AccessBoombarriers.closing or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_on needs AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.closing;
      end
      group RequirementsTrafficlight1:
        alg bool red = Trafficlight1.Mode.red;
        alg bool off = Trafficlight1.Mode.off;
        requirement invariant red and not Boombarrier1.open disables .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash;
        requirement invariant red and not Boombarrier2.open disables .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash;
        requirement invariant J32.Mode.off disables .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash;
        requirement invariant off and not J32.TimerReleaseSignal.finished disables .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash;
        requirement invariant .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash needs red and AccessTrafficlights.off or off and AccessTrafficlights.red or AccessTrafficlights.flash;
        requirement invariant .Tunnel.Traffictube1.Trafficlight1.Mode.c_yellow needs AccessTrafficlights.red;
      end
      group RequirementsTrafficlight2:
        alg bool red = Trafficlight2.Mode.red;
        alg bool off = Trafficlight2.Mode.off;
        requirement invariant red and not Boombarrier1.open disables .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash;
        requirement invariant red and not Boombarrier2.open disables .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash;
        requirement invariant J32.Mode.off disables .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash;
        requirement invariant off and not J32.TimerReleaseSignal.finished disables .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash;
        requirement invariant .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash needs red and AccessTrafficlights.off or off and AccessTrafficlights.red or AccessTrafficlights.flash;
        requirement invariant .Tunnel.Traffictube1.Trafficlight2.Mode.c_yellow needs AccessTrafficlights.red;
      end
      group RequirementsTrafficlight3:
        alg bool red = Trafficlight3.Mode.red;
        alg bool off = Trafficlight3.Mode.off;
        requirement invariant red and not Boombarrier1.open disables .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash;
        requirement invariant red and not Boombarrier2.open disables .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash;
        requirement invariant J32.Mode.off disables .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash;
        requirement invariant off and not J32.TimerReleaseSignal.finished disables .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash;
        requirement invariant .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash needs red and AccessTrafficlights.off or off and AccessTrafficlights.red or AccessTrafficlights.flash;
        requirement invariant .Tunnel.Traffictube1.Trafficlight3.Mode.c_yellow needs AccessTrafficlights.red;
      end
      group RequirementsBroadcast1:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast2:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast3:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast4:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast5:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast6:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast7:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast8:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast9:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast10:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast11:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast12:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast13:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast14:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast15:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast16:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast17:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast18:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast19:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast20:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast21:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast22:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast23:
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsEscapeDoor1:
        alg bool routeIndicationAuto = EscapeDoor1.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor1.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor1.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor2:
        alg bool routeIndicationAuto = EscapeDoor2.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor2.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor2.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor3:
        alg bool routeIndicationAuto = EscapeDoor3.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor3.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor3.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor4:
        alg bool routeIndicationAuto = EscapeDoor4.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor4.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor4.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor5:
        alg bool routeIndicationAuto = EscapeDoor5.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor5.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor5.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor6:
        alg bool routeIndicationAuto = EscapeDoor6.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor6.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor6.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor7:
        alg bool routeIndicationAuto = EscapeDoor7.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor7.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor7.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      requirement invariant .Tunnel.Traffictube1.PopUp.Window.c_on needs ButtonEmergency.Observer.pressed or ModeTraffictube.operational;
      requirement invariant .Tunnel.Traffictube1.PopUp.Window.c_off needs ModeTraffictube.emergency or ModeTraffictube.support or PopUp.ButtonReject.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_operational needs ButtonOperational.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_emergency needs PopUp.ButtonAccept.Observer.pressed or PopUp.Timer.finished;
      requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_evacuationEmergency needs ButtonEmergency.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_support needs not ModeTraffictube.emergency;
      requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_evacuation needs ButtonEvacuation.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_maintenance needs ButtonMaintenance.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.AccessBoombarriers.c_open needs ControlBoombarriers.Mode.manual and ButtonOpenBoombarriers.Observer.pressed or ButtonPrimaryOpenTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.AccessBoombarriers.c_close needs ControlBoombarriers.Mode.manual and ButtonCloseBoombarriers.Observer.pressed or ButtonPrimaryCloseTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.AccessBoombarriers.c_closeUnconditionally needs ControlBoombarriers.Mode.manual and ButtonCloseUnconditionalBoombarriers.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.AccessBoombarriers.c_stop needs ControlBoombarriers.Mode.manual and ButtonStopBoombarriers.Observer.pressed or not AccessBoombarriers.closingUnconditionally;
      requirement invariant .Tunnel.Traffictube1.AccessTrafficlights.c_off needs ControlTrafficlights.Mode.manual and ButtonOffTrafficlights.Observer.pressed or ButtonPrimaryOffTrafficlights.Observer.pressed or ButtonPrimaryOpenTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.AccessTrafficlights.c_flash needs ControlTrafficlights.Mode.manual and ButtonFlashTrafficlights.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.AccessTrafficlights.c_red needs ControlTrafficlights.Mode.manual and ButtonRedTrafficlights.Observer.pressed or ButtonPrimaryRedTrafficlights.Observer.pressed or ButtonPrimaryCloseTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.J32.Mode.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash;
      requirement invariant .Tunnel.Traffictube1.J32.Mode.c_off needs Trafficlight1.Mode.off;
      requirement invariant .Tunnel.Traffictube1.J32.Mode.c_off needs Trafficlight2.Mode.off;
      requirement invariant .Tunnel.Traffictube1.J32.Mode.c_off needs Trafficlight3.Mode.off;
      requirement invariant .Tunnel.Traffictube1.J32.Mode.c_off needs AccessTrafficlights.off;
      requirement invariant .Tunnel.Traffictube1.MatrixsignTrafficlight.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash or AccessTrafficlights.off and not Trafficlight1.Mode.off and not Trafficlight2.Mode.off and not Trafficlight3.Mode.off;
      requirement invariant .Tunnel.Traffictube1.MatrixsignUnpressed.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash;
      requirement invariant .Tunnel.Traffictube1.VentilationDirection.c_againstDrivingDirection needs ControlVentilation.Mode.auto and ModeTraffictube.support or ControlVentilation.Mode.manual and ButtonVentilationAgainstDrivingDirection.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.VentilationDirection.c_drivingDirection needs ControlVentilation.Mode.auto and not ModeTraffictube.support or ControlVentilation.Mode.manual and ButtonVentilationDrivingDirection.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.Recorder.c_on needs ModeTraffictube.emergency or ModeTraffictube.evacuation or ModeTraffictube.support;
      requirement invariant .Tunnel.Traffictube1.SwitchTimerAudio.c_on needs ButtonEvacuation.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.SwitchTimerAudio.c_off needs not ModeTraffictube.evacuation;
      requirement invariant .Tunnel.Traffictube1.EscapeDoorBroadcast.c_on needs ControlEscapeDoorBroadcast.Mode.auto and SwitchTimerAudio.on2 or not ControlEscapeDoorBroadcast.Mode.auto and ButtonEscapeDoorBroadcastOn.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.EscapeDoorBroadcast.c_on needs Broadcast1.suppressed;
      requirement invariant .Tunnel.Traffictube1.EscapeDoorBroadcast.c_off needs ControlEscapeDoorBroadcast.Mode.auto and SwitchTimerAudio.off or not ControlEscapeDoorBroadcast.Mode.auto and ButtonEscapeDoorBroadcastOff.Observer.pressed;
      requirement invariant .Tunnel.Traffictube1.EscapeDoorBroadcast.c_suppressed needs ControlEscapeDoorBroadcast.Mode.auto and SwitchTimerAudio.on1;
    end
    plant automaton BroadcastButtons1:
      monitor .Tunnel.u_broadcastStop, .Tunnel.u_broadcastBothTubes, .Tunnel.u_broadcastTraffictube1, .Tunnel.u_broadcastTraffictube2, .Tunnel.u_broadcastSection1, .Tunnel.u_broadcastSection2, .Tunnel.u_broadcastCamera1, .Tunnel.u_broadcastCamera2;
      location off:
        initial;
        marked;
        edge .Tunnel.BroadcastButtons1.c_evacuation goto evacuation;
        edge .Tunnel.u_broadcastTraffictube1, .Tunnel.u_broadcastBothTubes goto traffictube;
        edge .Tunnel.u_broadcastSection1 goto section;
        edge .Tunnel.u_broadcastCamera1 goto camera;
      location traffictube:
        edge .Tunnel.u_broadcastStop, .Tunnel.u_broadcastTraffictube2, .Tunnel.u_broadcastSection2, .Tunnel.u_broadcastCamera2 goto off;
        edge .Tunnel.BroadcastButtons1.c_evacuation goto evacuation;
        edge .Tunnel.u_broadcastTraffictube1, .Tunnel.u_broadcastBothTubes goto traffictube;
        edge .Tunnel.u_broadcastSection1 goto section;
        edge .Tunnel.u_broadcastCamera1 goto camera;
      location section:
        edge .Tunnel.u_broadcastStop, .Tunnel.u_broadcastTraffictube2, .Tunnel.u_broadcastSection2, .Tunnel.u_broadcastCamera2 goto off;
        edge .Tunnel.BroadcastButtons1.c_evacuation goto evacuation;
        edge .Tunnel.u_broadcastTraffictube1, .Tunnel.u_broadcastBothTubes goto traffictube;
        edge .Tunnel.u_broadcastSection1 goto section;
        edge .Tunnel.u_broadcastCamera1 goto camera;
      location camera:
        edge .Tunnel.u_broadcastStop, .Tunnel.u_broadcastTraffictube2, .Tunnel.u_broadcastSection2, .Tunnel.u_broadcastCamera2 goto off;
        edge .Tunnel.BroadcastButtons1.c_evacuation goto evacuation;
        edge .Tunnel.u_broadcastTraffictube1, .Tunnel.u_broadcastBothTubes goto traffictube;
        edge .Tunnel.u_broadcastSection1 goto section;
        edge .Tunnel.u_broadcastCamera1 goto camera;
      location evacuation:
        edge .Tunnel.BroadcastButtons1.c_off, .Tunnel.u_broadcastStop, .Tunnel.u_broadcastTraffictube2, .Tunnel.u_broadcastSection2, .Tunnel.u_broadcastCamera2 goto off;
        edge .Tunnel.u_broadcastTraffictube1, .Tunnel.u_broadcastBothTubes goto traffictube;
        edge .Tunnel.u_broadcastSection1 goto section;
        edge .Tunnel.u_broadcastCamera1 goto camera;
    end
    group HeadDrainCellar1:
      plant automaton Sensor1:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor1.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor1.u_off goto off;
      end
      plant automaton Sensor2:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor2.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor2.u_off goto off;
      end
      plant automaton Sensor3:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor3.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor3.u_off goto off;
      end
      plant automaton Sensor4:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor4.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor4.u_off goto off;
      end
      plant automaton Sensor5:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor5.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Sensor5.u_off goto off;
      end
      plant automaton Pump1:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Pump1.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Pump1.c_off goto off;
      end
      plant automaton Pump3:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar1.Pump3.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.HeadDrainCellar1.Pump3.c_off goto off;
      end
      plant automaton PhysicalRelation:
        location:
          initial;
          marked;
          edge .Tunnel.HeadDrainCellar1.Sensor1.u_off when Sensor2.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar1.Sensor2.u_off when Sensor3.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar1.Sensor3.u_off when Sensor4.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar1.Sensor4.u_off when Sensor5.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar1.Sensor5.u_off when Pump1.on or Pump3.on;
          edge .Tunnel.HeadDrainCellar1.Sensor2.u_on when Sensor1.on;
          edge .Tunnel.HeadDrainCellar1.Sensor3.u_on when Sensor2.on;
          edge .Tunnel.HeadDrainCellar1.Sensor4.u_on when Sensor3.on;
          edge .Tunnel.HeadDrainCellar1.Sensor5.u_on when Sensor4.on;
      end
      plant automaton Regime:
        location emptying:
          initial;
          marked;
          edge .Tunnel.HeadDrainCellar1.Regime.c_store goto storing;
          edge .Tunnel.HeadDrainCellar1.Regime.c_off goto off;
        location storing:
          edge .Tunnel.HeadDrainCellar1.Regime.c_empty goto emptying;
          edge .Tunnel.HeadDrainCellar1.Regime.c_off goto off;
        location off:
          edge .Tunnel.HeadDrainCellar1.Regime.c_store goto storing;
          edge .Tunnel.HeadDrainCellar1.Regime.c_empty goto emptying;
      end
      group Control:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.Control.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.HeadDrainCellar1.Control.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.HeadDrainCellar1.Control.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.HeadDrainCellar1.Control.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.HeadDrainCellar1.Control.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonStoring:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.storing;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonStoring.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.HeadDrainCellar1.ButtonStoring.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonStoring.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonStoring.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.HeadDrainCellar1.ButtonStoring.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEmptying:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.emptying;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonEmptying.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.HeadDrainCellar1.ButtonEmptying.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonEmptying.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonEmptying.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.HeadDrainCellar1.ButtonEmptying.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOff:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.off;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.HeadDrainCellar1.ButtonOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.HeadDrainCellar1.ButtonOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.HeadDrainCellar1.ButtonOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      requirement invariant .Tunnel.HeadDrainCellar1.Pump1.c_on needs Regime.storing and Sensor5.on or Regime.emptying and Sensor2.on;
      requirement invariant .Tunnel.HeadDrainCellar1.Pump3.c_on needs Regime.storing and Sensor5.on or Regime.emptying and Sensor3.on;
      requirement invariant .Tunnel.HeadDrainCellar1.Pump1.c_off needs Regime.storing and Sensor4.off or Regime.emptying and Sensor1.off or Regime.off;
      requirement invariant .Tunnel.HeadDrainCellar1.Pump3.c_off needs Regime.storing and Sensor4.off or Regime.emptying and Sensor1.off or Regime.off;
    end
    group MiddleTunnelChannel:
      group ControlPressure:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonPressureOff:
        alg bool conditionPush = ControlPressure.Mode.manual;
        alg bool conditionDone = Pressure1.off and Pressure2.off;
        alg bool conditionCancel = ControlPressure.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPressureLeft:
        alg bool conditionPush = ControlPressure.Mode.manual;
        alg bool conditionDone = Pressure1.left and Pressure2.left;
        alg bool conditionCancel = ControlPressure.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPressureRight:
        alg bool conditionPush = ControlPressure.Mode.manual;
        alg bool conditionDone = Pressure1.right and Pressure2.right;
        alg bool conditionCancel = ControlPressure.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton Pressure1:
        location off:
          initial;
          marked;
          edge .Tunnel.MiddleTunnelChannel.Pressure1.c_left goto left;
          edge .Tunnel.MiddleTunnelChannel.Pressure1.c_right goto right;
        location left:
          edge .Tunnel.MiddleTunnelChannel.Pressure1.c_off goto off;
        location right:
          edge .Tunnel.MiddleTunnelChannel.Pressure1.c_off goto off;
      end
      plant automaton Pressure2:
        location off:
          initial;
          marked;
          edge .Tunnel.MiddleTunnelChannel.Pressure2.c_left goto left;
          edge .Tunnel.MiddleTunnelChannel.Pressure2.c_right goto right;
        location left:
          edge .Tunnel.MiddleTunnelChannel.Pressure2.c_off goto off;
        location right:
          edge .Tunnel.MiddleTunnelChannel.Pressure2.c_off goto off;
      end
      plant automaton Lighting:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.MiddleTunnelChannel.Lighting.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.MiddleTunnelChannel.Lighting.c_off goto off;
      end
      group ControlLighting:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonLightingOff:
        alg bool conditionPush = ControlLighting.Mode.manual;
        alg bool conditionDone = Lighting.off;
        alg bool conditionCancel = ControlLighting.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonLightingOn:
        alg bool conditionPush = ControlLighting.Mode.manual;
        alg bool conditionDone = Lighting.on;
        alg bool conditionCancel = ControlLighting.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton DynamicEscaperouteIndication:
        location off:
          initial;
          marked;
          edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_upward goto upward;
          edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_downward goto downward;
        location upward:
          edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_off goto off;
          edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_downward goto downward;
        location downward:
          edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_off goto off;
          edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_upward goto upward;
      end
      group ControlDynamicEscaperouteIndication:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonDynamicEscaperouteIndicationOff:
        alg bool conditionPush = ControlDynamicEscaperouteIndication.Mode.manual;
        alg bool conditionDone = DynamicEscaperouteIndication.off;
        alg bool conditionCancel = ControlDynamicEscaperouteIndication.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonDynamicEscaperouteIndicationUpward:
        alg bool conditionPush = ControlDynamicEscaperouteIndication.Mode.manual;
        alg bool conditionDone = DynamicEscaperouteIndication.upward;
        alg bool conditionCancel = ControlDynamicEscaperouteIndication.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonDynamicEscaperouteIndicationDownward:
        alg bool conditionPush = ControlDynamicEscaperouteIndication.Mode.manual;
        alg bool conditionDone = DynamicEscaperouteIndication.downward;
        alg bool conditionCancel = ControlDynamicEscaperouteIndication.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton Broadcast:
        location off:
          initial;
          marked;
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_on, .Tunnel.MiddleTunnelChannel.Broadcast.c_onManual goto on;
        location on:
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_off goto off;
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressed goto suppressed;
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressedManual goto suppressedManual;
        location suppressed:
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_off goto off;
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_on goto on;
        location suppressedManual:
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_off goto off;
          edge .Tunnel.MiddleTunnelChannel.Broadcast.c_onManual goto on;
      end
      group ButtonStartMessage:
        alg bool conditionPush = Broadcast.off or Broadcast.suppressedManual;
        alg bool conditionDone = Broadcast.on;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonStopMessage:
        alg bool conditionPush = Broadcast.on;
        alg bool conditionDone = Broadcast.off or Broadcast.suppressedManual;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
    end
    group MiddleDrainCellar:
      plant automaton Sensor1:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor1.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor1.u_off goto off;
      end
      plant automaton Sensor2:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor2.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor2.u_off goto off;
      end
      plant automaton Sensor3:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor3.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor3.u_off goto off;
      end
      plant automaton Sensor4:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor4.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor4.u_off goto off;
      end
      plant automaton Sensor5:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor5.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Sensor5.u_off goto off;
      end
      plant automaton Pump1:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Pump1.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Pump1.c_off goto off;
      end
      plant automaton Pump2:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.MiddleDrainCellar.Pump2.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.MiddleDrainCellar.Pump2.c_off goto off;
      end
      plant automaton PumpDirection:
        location headDrainCellar1:
          initial;
          marked;
          edge .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar2 goto headDrainCellar2;
        location headDrainCellar2:
          edge .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar1 goto headDrainCellar1;
      end
      plant automaton PhysicalRelation:
        location:
          initial;
          marked;
          edge .Tunnel.MiddleDrainCellar.Sensor1.u_off when Sensor2.off and (Pump1.on or Pump2.on);
          edge .Tunnel.MiddleDrainCellar.Sensor2.u_off when Sensor3.off and (Pump1.on or Pump2.on);
          edge .Tunnel.MiddleDrainCellar.Sensor3.u_off when Sensor4.off and (Pump1.on or Pump2.on);
          edge .Tunnel.MiddleDrainCellar.Sensor4.u_off when Sensor5.off and (Pump1.on or Pump2.on);
          edge .Tunnel.MiddleDrainCellar.Sensor5.u_off when Pump1.on or Pump2.on;
          edge .Tunnel.MiddleDrainCellar.Sensor2.u_on when Sensor1.on;
          edge .Tunnel.MiddleDrainCellar.Sensor3.u_on when Sensor2.on;
          edge .Tunnel.MiddleDrainCellar.Sensor4.u_on when Sensor3.on;
          edge .Tunnel.MiddleDrainCellar.Sensor5.u_on when Sensor4.on;
      end
      plant automaton Regime:
        location emptying:
          initial;
          marked;
          edge .Tunnel.MiddleDrainCellar.Regime.c_store goto storing;
          edge .Tunnel.MiddleDrainCellar.Regime.c_off goto off;
        location storing:
          edge .Tunnel.MiddleDrainCellar.Regime.c_empty goto emptying;
          edge .Tunnel.MiddleDrainCellar.Regime.c_off goto off;
        location off:
          edge .Tunnel.MiddleDrainCellar.Regime.c_store goto storing;
          edge .Tunnel.MiddleDrainCellar.Regime.c_empty goto emptying;
      end
      group Control:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.Control.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.MiddleDrainCellar.Control.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleDrainCellar.Control.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.MiddleDrainCellar.Control.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.MiddleDrainCellar.Control.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonStoring:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.storing;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonStoring.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleDrainCellar.ButtonStoring.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonStoring.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonStoring.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleDrainCellar.ButtonStoring.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEmptying:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.emptying;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonEmptying.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleDrainCellar.ButtonEmptying.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonEmptying.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonEmptying.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleDrainCellar.ButtonEmptying.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOff:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.off;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.MiddleDrainCellar.ButtonOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.MiddleDrainCellar.ButtonOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.MiddleDrainCellar.ButtonOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      requirement invariant .Tunnel.MiddleDrainCellar.Pump1.c_on needs Regime.storing and Sensor5.on or Regime.emptying and Sensor2.on;
      requirement invariant .Tunnel.MiddleDrainCellar.Pump2.c_on needs Regime.storing and Sensor5.on or Regime.emptying and Sensor3.on;
      requirement invariant .Tunnel.MiddleDrainCellar.Pump1.c_off needs Regime.storing and Sensor4.off or Regime.emptying and Sensor1.off or Regime.off;
      requirement invariant .Tunnel.MiddleDrainCellar.Pump2.c_off needs Regime.storing and Sensor4.off or Regime.emptying and Sensor1.off or Regime.off;
    end
    group HeadDrainCellar2:
      plant automaton Sensor1:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor1.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor1.u_off goto off;
      end
      plant automaton Sensor2:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor2.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor2.u_off goto off;
      end
      plant automaton Sensor3:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor3.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor3.u_off goto off;
      end
      plant automaton Sensor4:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor4.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor4.u_off goto off;
      end
      plant automaton Sensor5:
        alg bool offInitial = true;
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial offInitial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor5.u_on goto on;
        location on:
          initial not offInitial;
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Sensor5.u_off goto off;
      end
      plant automaton Pump1:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Pump1.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Pump1.c_off goto off;
      end
      plant automaton Pump3:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.HeadDrainCellar2.Pump3.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.HeadDrainCellar2.Pump3.c_off goto off;
      end
      plant automaton PhysicalRelation:
        location:
          initial;
          marked;
          edge .Tunnel.HeadDrainCellar2.Sensor1.u_off when Sensor2.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar2.Sensor2.u_off when Sensor3.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar2.Sensor3.u_off when Sensor4.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar2.Sensor4.u_off when Sensor5.off and (Pump1.on or Pump3.on);
          edge .Tunnel.HeadDrainCellar2.Sensor5.u_off when Pump1.on or Pump3.on;
          edge .Tunnel.HeadDrainCellar2.Sensor2.u_on when Sensor1.on;
          edge .Tunnel.HeadDrainCellar2.Sensor3.u_on when Sensor2.on;
          edge .Tunnel.HeadDrainCellar2.Sensor4.u_on when Sensor3.on;
          edge .Tunnel.HeadDrainCellar2.Sensor5.u_on when Sensor4.on;
      end
      plant automaton Regime:
        location emptying:
          initial;
          marked;
          edge .Tunnel.HeadDrainCellar2.Regime.c_store goto storing;
          edge .Tunnel.HeadDrainCellar2.Regime.c_off goto off;
        location storing:
          edge .Tunnel.HeadDrainCellar2.Regime.c_empty goto emptying;
          edge .Tunnel.HeadDrainCellar2.Regime.c_off goto off;
        location off:
          edge .Tunnel.HeadDrainCellar2.Regime.c_store goto storing;
          edge .Tunnel.HeadDrainCellar2.Regime.c_empty goto emptying;
      end
      group Control:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.Control.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.HeadDrainCellar2.Control.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.HeadDrainCellar2.Control.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.HeadDrainCellar2.Control.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.HeadDrainCellar2.Control.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonStoring:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.storing;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonStoring.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.HeadDrainCellar2.ButtonStoring.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonStoring.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonStoring.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.HeadDrainCellar2.ButtonStoring.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEmptying:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.emptying;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonEmptying.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.HeadDrainCellar2.ButtonEmptying.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonEmptying.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonEmptying.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.HeadDrainCellar2.ButtonEmptying.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOff:
        alg bool conditionPush = Control.Mode.manual;
        alg bool conditionDone = Regime.off;
        alg bool conditionCancel = Control.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.HeadDrainCellar2.ButtonOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.HeadDrainCellar2.ButtonOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.HeadDrainCellar2.ButtonOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      requirement invariant .Tunnel.HeadDrainCellar2.Pump1.c_on needs Regime.storing and Sensor5.on or Regime.emptying and Sensor2.on;
      requirement invariant .Tunnel.HeadDrainCellar2.Pump3.c_on needs Regime.storing and Sensor5.on or Regime.emptying and Sensor3.on;
      requirement invariant .Tunnel.HeadDrainCellar2.Pump1.c_off needs Regime.storing and Sensor4.off or Regime.emptying and Sensor1.off or Regime.off;
      requirement invariant .Tunnel.HeadDrainCellar2.Pump3.c_off needs Regime.storing and Sensor4.off or Regime.emptying and Sensor1.off or Regime.off;
    end
    group Traffictube2:
      group Boombarrier1:
        alg bool open = SensorOpen.on and ActuatorUp.off and ActuatorDown.off;
        alg bool closed = SensorClosed.on and ActuatorUp.off and ActuatorDown.off;
        plant automaton ActuatorUp:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_off goto off;
            edge .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_offEmergency goto off;
        end
        plant automaton ActuatorDown:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_off goto off;
            edge .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_offEmergency goto off;
        end
        plant automaton SensorOpen:
          alg bool offInitial = false;
          alg bool offMarked = false;
          alg bool onMarked = true;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorOpen.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorOpen.u_off goto off;
        end
        plant automaton SensorClosed:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorClosed.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorClosed.u_off goto off;
        end
        plant automaton PhysicalRelation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorOpen.u_on when ActuatorUp.on and SensorClosed.off;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorClosed.u_off when ActuatorUp.on;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorOpen.u_off when ActuatorDown.on;
            edge .Tunnel.Traffictube2.Boombarrier1.SensorClosed.u_on when ActuatorDown.on and SensorOpen.off;
        end
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_on needs ActuatorDown.off;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_on needs not open;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_off needs SensorOpen.on;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on needs ActuatorUp.off;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on needs not closed;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_off needs SensorClosed.on;
      end
      group Boombarrier2:
        alg bool open = SensorOpen.on and ActuatorUp.off and ActuatorDown.off;
        alg bool closed = SensorClosed.on and ActuatorUp.off and ActuatorDown.off;
        plant automaton ActuatorUp:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_off goto off;
            edge .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_offEmergency goto off;
        end
        plant automaton ActuatorDown:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_off goto off;
            edge .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_offEmergency goto off;
        end
        plant automaton SensorOpen:
          alg bool offInitial = false;
          alg bool offMarked = false;
          alg bool onMarked = true;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorOpen.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorOpen.u_off goto off;
        end
        plant automaton SensorClosed:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorClosed.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorClosed.u_off goto off;
        end
        plant automaton PhysicalRelation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorOpen.u_on when ActuatorUp.on and SensorClosed.off;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorClosed.u_off when ActuatorUp.on;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorOpen.u_off when ActuatorDown.on;
            edge .Tunnel.Traffictube2.Boombarrier2.SensorClosed.u_on when ActuatorDown.on and SensorOpen.off;
        end
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_on needs ActuatorDown.off;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_on needs not open;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_off needs SensorOpen.on;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on needs ActuatorUp.off;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on needs not closed;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_off needs SensorClosed.on;
      end
      group ControlBoombarriers:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonStopBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.stopped;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonStopBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonStopBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonStopBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonStopBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonStopBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOpenBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.opening;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonOpenBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonOpenBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonOpenBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonOpenBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonOpenBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonCloseBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.closing;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonCloseBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonCloseBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonCloseBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonCloseBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonCloseBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonCloseUnconditionalBoombarriers:
        alg bool conditionPush = ControlBoombarriers.Mode.manual;
        alg bool conditionDone = AccessBoombarriers.closingUnconditionally;
        alg bool conditionCancel = ControlBoombarriers.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton AccessBoombarriers:
        monitor .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support;
        location stopped:
          initial;
          marked;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_open goto opening;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_close, .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support goto closing;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_closeUnconditionally goto closingUnconditionally;
        location opening:
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_close, .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support goto closing;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_closeUnconditionally goto closingUnconditionally;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_stop goto stopped;
        location closing:
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_open goto opening;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_stop goto stopped;
        location closingUnconditionally:
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_open goto opening;
          edge .Tunnel.Traffictube2.AccessBoombarriers.c_stop goto stopped;
      end
      group Trafficlight1:
        plant automaton Mode:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash goto flash;
          location flash:
            edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_off goto off;
            edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_yellow goto yellow;
          location yellow:
            edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash goto flash;
            edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_red goto red;
          location red:
            edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash goto flash;
        end
        plant automaton ReleaseSignal:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Trafficlight1.ReleaseSignal.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Trafficlight1.ReleaseSignal.u_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_reset goto off;
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight1.ReleaseSignal.u_on when Mode.red and TimerReleaseSignal.finished;
            edge .Tunnel.Traffictube2.Trafficlight1.ReleaseSignal.u_off when not Mode.red;
        end
        requirement invariant .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_on needs Mode.red;
        requirement invariant .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_reset needs not Mode.red;
      end
      group Trafficlight2:
        plant automaton Mode:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash goto flash;
          location flash:
            edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_off goto off;
            edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_yellow goto yellow;
          location yellow:
            edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash goto flash;
            edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_red goto red;
          location red:
            edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash goto flash;
        end
        plant automaton ReleaseSignal:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Trafficlight2.ReleaseSignal.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Trafficlight2.ReleaseSignal.u_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_reset goto off;
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight2.ReleaseSignal.u_on when Mode.red and TimerReleaseSignal.finished;
            edge .Tunnel.Traffictube2.Trafficlight2.ReleaseSignal.u_off when not Mode.red;
        end
        requirement invariant .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_on needs Mode.red;
        requirement invariant .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_reset needs not Mode.red;
      end
      group Trafficlight3:
        plant automaton Mode:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash goto flash;
          location flash:
            edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_off goto off;
            edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_yellow goto yellow;
          location yellow:
            edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash goto flash;
            edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_red goto red;
          location red:
            edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash goto flash;
        end
        plant automaton ReleaseSignal:
          alg bool offInitial = true;
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial offInitial;
            marked offMarked;
            edge .Tunnel.Traffictube2.Trafficlight3.ReleaseSignal.u_on goto on;
          location on:
            initial not offInitial;
            marked onMarked;
            edge .Tunnel.Traffictube2.Trafficlight3.ReleaseSignal.u_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_reset goto off;
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.Trafficlight3.ReleaseSignal.u_on when Mode.red and TimerReleaseSignal.finished;
            edge .Tunnel.Traffictube2.Trafficlight3.ReleaseSignal.u_off when not Mode.red;
        end
        requirement invariant .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_on needs Mode.red;
        requirement invariant .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_reset needs not Mode.red;
      end
      group ControlTrafficlights:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonRedTrafficlights:
        alg bool conditionPush = ControlTrafficlights.Mode.manual;
        alg bool conditionDone = AccessTrafficlights.red;
        alg bool conditionCancel = ControlTrafficlights.Mode.auto or ButtonFlashTrafficlights.Observer.pressed or ButtonOffTrafficlights.Observer.pressed;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonRedTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonRedTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonRedTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonRedTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonRedTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonFlashTrafficlights:
        alg bool conditionPush = ControlTrafficlights.Mode.manual;
        alg bool conditionDone = AccessTrafficlights.flash;
        alg bool conditionCancel = ControlTrafficlights.Mode.auto or ButtonRedTrafficlights.Observer.pressed or ButtonOffTrafficlights.Observer.pressed;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonFlashTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonFlashTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonFlashTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonFlashTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonFlashTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonOffTrafficlights:
        alg bool conditionPush = ControlTrafficlights.Mode.manual;
        alg bool conditionDone = AccessTrafficlights.off;
        alg bool conditionCancel = ControlTrafficlights.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonOffTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonOffTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonOffTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonOffTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonOffTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPrimaryRedTrafficlights:
        alg bool conditionPush = not AccessTrafficlights.red;
        alg bool conditionDone = AccessTrafficlights.red;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPrimaryOffTrafficlights:
        alg bool conditionPush = not AccessTrafficlights.off;
        alg bool conditionDone = AccessTrafficlights.off;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton AccessTrafficlights:
        monitor .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support;
        location off:
          initial;
          marked;
          edge .Tunnel.Traffictube2.AccessTrafficlights.c_red, .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support goto red;
          edge .Tunnel.Traffictube2.AccessTrafficlights.c_flash goto flash;
        location flash:
          edge .Tunnel.Traffictube2.AccessTrafficlights.c_red, .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support goto red;
          edge .Tunnel.Traffictube2.AccessTrafficlights.c_off goto off;
        location red:
          edge .Tunnel.Traffictube2.AccessTrafficlights.c_off goto off;
          edge .Tunnel.Traffictube2.AccessTrafficlights.c_flash goto flash;
      end
      group ButtonPrimaryCloseTraffictube:
        alg bool conditionPush = not AccessTrafficlights.red or not AccessBoombarriers.closing;
        alg bool conditionDone = AccessTrafficlights.red and AccessBoombarriers.closing;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonPrimaryOpenTraffictube:
        alg bool conditionPush = not AccessTrafficlights.off or not AccessBoombarriers.opening;
        alg bool conditionDone = AccessTrafficlights.off and AccessBoombarriers.opening;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group J32:
        plant automaton Mode:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.J32.Mode.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.J32.Mode.c_off goto off;
        end
        plant automaton TimerReleaseSignal:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_on goto running;
          location running:
            edge .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_reset goto off;
            edge .Tunnel.Traffictube2.J32.TimerReleaseSignal.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_reset goto off;
        end
        requirement invariant .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_on needs Mode.on;
        requirement invariant .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_reset needs Mode.off;
      end
      plant automaton MatrixsignTrafficlight:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.Traffictube2.MatrixsignTrafficlight.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.Traffictube2.MatrixsignTrafficlight.c_off goto off;
      end
      plant automaton MatrixsignUnpressed:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.Traffictube2.MatrixsignUnpressed.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.Traffictube2.MatrixsignUnpressed.c_off goto off;
      end
      plant automaton Ventilation1:
        disc int[0..8] setting = 0;
        location:
          initial;
          marked;
          edge .Tunnel.Traffictube2.Ventilation1.c_0 when not(setting = 0) do setting := 0;
          edge .Tunnel.Traffictube2.Ventilation1.c_1 when not(setting = 1) do setting := 1;
          edge .Tunnel.Traffictube2.Ventilation1.c_2 when not(setting = 2) do setting := 2;
          edge .Tunnel.Traffictube2.Ventilation1.c_3 when not(setting = 3) do setting := 3;
          edge .Tunnel.Traffictube2.Ventilation1.c_4 when not(setting = 4) do setting := 4;
          edge .Tunnel.Traffictube2.Ventilation1.c_5 when not(setting = 5) do setting := 5;
          edge .Tunnel.Traffictube2.Ventilation1.c_6 when not(setting = 6) do setting := 6;
          edge .Tunnel.Traffictube2.Ventilation1.c_7 when not(setting = 7) do setting := 7;
          edge .Tunnel.Traffictube2.Ventilation1.c_8 when not(setting = 8) do setting := 8;
      end
      plant automaton VentilationDirection:
        location drivingDirection:
          initial;
          marked;
          edge .Tunnel.Traffictube2.VentilationDirection.c_againstDrivingDirection goto againstDrivingDirection;
        location againstDrivingDirection:
          edge .Tunnel.Traffictube2.VentilationDirection.c_drivingDirection goto drivingDirection;
      end
      group ControlVentilation:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ControlVentilation.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube2.ControlVentilation.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube2.ControlVentilation.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.ControlVentilation.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonVentilationDrivingDirection:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = VentilationDirection.drivingDirection;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonVentilationAgainstDrivingDirection:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = VentilationDirection.againstDrivingDirection;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonVentilation0:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = Ventilation1.setting = 0;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilation0.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonVentilation0.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilation0.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilation0.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonVentilation0.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonVentilation1:
        alg bool conditionPush = ControlVentilation.Mode.manual;
        alg bool conditionDone = Ventilation1.setting = 1;
        alg bool conditionCancel = ControlVentilation.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilation1.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonVentilation1.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilation1.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonVentilation1.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonVentilation1.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton Recorder:
        alg bool offMarked = true;
        alg bool onMarked = false;
        location off:
          initial;
          marked offMarked;
          edge .Tunnel.Traffictube2.Recorder.c_on goto on;
        location on:
          marked onMarked;
          edge .Tunnel.Traffictube2.Recorder.c_off goto off;
      end
      plant automaton Broadcast1:
        location message:
          initial;
          marked;
          edge .Tunnel.Traffictube2.Broadcast1.c_live goto live;
          edge .Tunnel.Traffictube2.Broadcast1.c_suppressed goto suppressed;
        location live:
          edge .Tunnel.Traffictube2.Broadcast1.c_message goto message;
        location suppressed:
          edge .Tunnel.Traffictube2.Broadcast1.c_message goto message;
          edge .Tunnel.Traffictube2.Broadcast1.c_live goto live;
      end
      plant automaton SwitchTimerAudio:
        location off:
          initial;
          marked;
          edge .Tunnel.Traffictube2.SwitchTimerAudio.c_on goto on1;
        location on1:
          edge .Tunnel.Traffictube2.SwitchTimerAudio.c_off goto off;
          edge .Tunnel.Traffictube2.SwitchTimerAudio.u_timeout goto on2;
        location on2:
          edge .Tunnel.Traffictube2.SwitchTimerAudio.c_off goto off;
          edge .Tunnel.Traffictube2.SwitchTimerAudio.u_timeout goto on1;
      end
      group ButtonMessage:
        alg bool conditionPush = Broadcast1.live;
        alg bool conditionDone = Broadcast1.message and SwitchTimerAudio.off;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonMessage.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonMessage.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonMessage.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonMessage.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonMessage.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonLive:
        alg bool conditionPush = not Broadcast1.live;
        alg bool conditionDone = Broadcast1.live;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonLive.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonLive.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonLive.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonLive.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonLive.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group EscapeDoor1:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor2:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor3:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor4:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor5:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor6:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      group EscapeDoor7:
        plant automaton RouteIndication:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_off goto off;
        end
        group ControlRouteIndication:
          plant automaton Mode:
            location auto:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_manual goto manual;
            location manual:
              edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_auto goto auto;
          end
          group ButtonManual:
            alg bool conditionPush = Mode.auto;
            alg bool conditionDone = Mode.manual;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          group ButtonAuto:
            alg bool conditionPush = Mode.manual;
            alg bool conditionDone = Mode.auto;
            alg bool conditionCancel = false;
            plant automaton Button:
              location:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Button.u_push;
            end
            plant automaton Observer:
              monitor .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Button.u_push;
              location unpressed:
                initial;
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Button.u_push when conditionPush goto pressed;
              location pressed:
                marked;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
                edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
            end
          end
          requirement invariant .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_manual needs ButtonManual.Observer.pressed;
          requirement invariant .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_auto needs ButtonAuto.Observer.pressed;
        end
        group ButtonRouteIndicationOff:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.off;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonRouteIndicationOn:
          alg bool conditionPush = ControlRouteIndication.Mode.manual;
          alg bool conditionDone = RouteIndication.on;
          alg bool conditionCancel = ControlRouteIndication.Mode.auto;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
      end
      plant automaton EscapeDoorBroadcast:
        location off:
          initial;
          marked;
          edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_on goto on;
          edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_suppressed goto suppressed;
        location on:
          edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_off goto off;
          edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_suppressed goto suppressed;
        location suppressed:
          edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_off goto off;
          edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_on goto on;
      end
      group ControlEscapeDoorBroadcast:
        plant automaton Mode:
          location auto:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_manual goto manual;
          location manual:
            edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_auto goto auto;
        end
        group ButtonManual:
          alg bool conditionPush = Mode.auto;
          alg bool conditionDone = Mode.manual;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonAuto:
          alg bool conditionPush = Mode.manual;
          alg bool conditionDone = Mode.auto;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        requirement invariant .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_manual needs ButtonManual.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_auto needs ButtonAuto.Observer.pressed;
      end
      group ButtonEscapeDoorBroadcastOff:
        alg bool conditionPush = ControlEscapeDoorBroadcast.Mode.manual;
        alg bool conditionDone = EscapeDoorBroadcast.off and SwitchTimerAudio.off;
        alg bool conditionCancel = ControlEscapeDoorBroadcast.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEscapeDoorBroadcastOn:
        alg bool conditionPush = ControlEscapeDoorBroadcast.Mode.manual;
        alg bool conditionDone = EscapeDoorBroadcast.on;
        alg bool conditionCancel = ControlEscapeDoorBroadcast.Mode.auto;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      plant automaton ModeTraffictube:
        location operational:
          initial;
          marked;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_emergency goto emergency;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_standby goto standby;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_maintenance goto maintenance;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_support goto support;
        location standby:
          edge .Tunnel.Traffictube2.ModeTraffictube.c_operational goto operational;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_emergency goto emergency;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_support goto support;
        location emergency:
          edge .Tunnel.Traffictube2.ModeTraffictube.c_recovery goto recovery;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_evacuation goto evacuation;
        location evacuation:
          edge .Tunnel.Traffictube2.ModeTraffictube.c_evacuationEmergency goto emergency;
        location recovery:
          edge .Tunnel.Traffictube2.ModeTraffictube.c_operational goto operational;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_emergency goto emergency;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_support goto support;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_maintenance goto maintenance;
        location support:
          edge .Tunnel.Traffictube2.ModeTraffictube.c_recovery goto recovery;
        location maintenance:
          edge .Tunnel.Traffictube2.ModeTraffictube.c_operational goto operational;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_recovery goto recovery;
          edge .Tunnel.Traffictube2.ModeTraffictube.c_support goto support;
      end
      group PopUp:
        plant automaton Window:
          alg bool offMarked = true;
          alg bool onMarked = false;
          location off:
            initial;
            marked offMarked;
            edge .Tunnel.Traffictube2.PopUp.Window.c_on goto on;
          location on:
            marked onMarked;
            edge .Tunnel.Traffictube2.PopUp.Window.c_off goto off;
        end
        plant automaton Timer:
          location off:
            initial;
            marked;
            edge .Tunnel.Traffictube2.PopUp.Timer.c_on goto running;
          location running:
            edge .Tunnel.Traffictube2.PopUp.Timer.c_reset goto off;
            edge .Tunnel.Traffictube2.PopUp.Timer.u_timeout goto finished;
          location finished:
            edge .Tunnel.Traffictube2.PopUp.Timer.c_reset goto off;
        end
        group ButtonAccept:
          alg bool conditionPush = true;
          alg bool conditionDone = ModeTraffictube.emergency and Window.off;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.PopUp.ButtonAccept.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        group ButtonReject:
          alg bool conditionPush = true;
          alg bool conditionDone = ModeTraffictube.operational and Window.off;
          alg bool conditionCancel = false;
          plant automaton Button:
            location:
              initial;
              marked;
              edge .Tunnel.Traffictube2.PopUp.ButtonReject.Button.u_push;
          end
          plant automaton Observer:
            monitor .Tunnel.Traffictube2.PopUp.ButtonReject.Button.u_push;
            location unpressed:
              initial;
              marked;
              edge .Tunnel.Traffictube2.PopUp.ButtonReject.Button.u_push when conditionPush goto pressed;
            location pressed:
              marked;
              edge .Tunnel.Traffictube2.PopUp.ButtonReject.Observer.c_done when conditionDone goto unpressed;
              edge .Tunnel.Traffictube2.PopUp.ButtonReject.Observer.c_cancel when conditionCancel goto unpressed;
          end
        end
        plant automaton Relation:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Button.u_push when Window.on;
            edge .Tunnel.Traffictube2.PopUp.ButtonReject.Button.u_push when Window.on;
        end
        requirement invariant .Tunnel.Traffictube2.PopUp.Window.c_on needs ButtonAccept.Observer.unpressed;
        requirement invariant .Tunnel.Traffictube2.PopUp.Window.c_on needs ButtonReject.Observer.unpressed;
        requirement invariant .Tunnel.Traffictube2.PopUp.Window.c_off needs ButtonAccept.Observer.pressed or ButtonReject.Observer.pressed or Timer.finished;
        requirement invariant .Tunnel.Traffictube2.PopUp.Timer.c_on needs Window.on;
        requirement invariant .Tunnel.Traffictube2.PopUp.Timer.c_reset needs Window.off;
      end
      group ButtonOperational:
        alg bool conditionPush = ModeTraffictube.recovery or ModeTraffictube.standby or ModeTraffictube.maintenance;
        alg bool conditionDone = ModeTraffictube.operational;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonOperational.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonOperational.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonOperational.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonOperational.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonOperational.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEmergency:
        alg bool conditionPush = not ModeTraffictube.support;
        alg bool conditionDone = PopUp.Window.on or ModeTraffictube.emergency;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEmergency.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonEmergency.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEmergency.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonEmergency.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonEmergency.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonEvacuation:
        alg bool conditionPush = ModeTraffictube.emergency;
        alg bool conditionDone = ModeTraffictube.evacuation and not SwitchTimerAudio.off;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEvacuation.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonEvacuation.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonEvacuation.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonEvacuation.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonEvacuation.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonRecovery:
        alg bool conditionPush = ModeTraffictube.emergency or ModeTraffictube.maintenance;
        alg bool conditionDone = ModeTraffictube.recovery;
        alg bool conditionCancel = false;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonRecovery.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonRecovery.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonRecovery.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonRecovery.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonRecovery.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group ButtonMaintenance:
        alg bool conditionPush = ModeTraffictube.operational or ModeTraffictube.recovery;
        alg bool conditionDone = ModeTraffictube.maintenance;
        alg bool conditionCancel = ModeTraffictube.standby or ModeTraffictube.emergency;
        plant automaton Button:
          location:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonMaintenance.Button.u_push;
        end
        plant automaton Observer:
          monitor .Tunnel.Traffictube2.ButtonMaintenance.Button.u_push;
          location unpressed:
            initial;
            marked;
            edge .Tunnel.Traffictube2.ButtonMaintenance.Button.u_push when conditionPush goto pressed;
          location pressed:
            marked;
            edge .Tunnel.Traffictube2.ButtonMaintenance.Observer.c_done when conditionDone goto unpressed;
            edge .Tunnel.Traffictube2.ButtonMaintenance.Observer.c_cancel when conditionCancel goto unpressed;
        end
      end
      group RequirementsBoombarrier1:
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on needs Trafficlight1.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on needs Trafficlight2.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on needs Trafficlight3.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on needs AccessBoombarriers.closing or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_on needs AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.closing;
      end
      group RequirementsBoombarrier2:
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on needs Trafficlight1.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on needs Trafficlight2.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on needs Trafficlight3.ReleaseSignal.on or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on needs AccessBoombarriers.closing or AccessBoombarriers.closingUnconditionally;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_on needs AccessBoombarriers.opening;
        requirement invariant .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_offEmergency needs AccessBoombarriers.stopped or AccessBoombarriers.closing;
      end
      group RequirementsTrafficlight1:
        alg bool red = Trafficlight1.Mode.red;
        alg bool off = Trafficlight1.Mode.off;
        requirement invariant red and not Boombarrier1.open disables .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash;
        requirement invariant red and not Boombarrier2.open disables .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash;
        requirement invariant J32.Mode.off disables .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash;
        requirement invariant off and not J32.TimerReleaseSignal.finished disables .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash;
        requirement invariant .Tunnel.Traffictube2.Trafficlight1.Mode.c_off needs AccessTrafficlights.off;
        requirement invariant .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash needs red and AccessTrafficlights.off or off and AccessTrafficlights.red or AccessTrafficlights.flash;
        requirement invariant .Tunnel.Traffictube2.Trafficlight1.Mode.c_yellow needs AccessTrafficlights.red;
      end
      group RequirementsTrafficlight2:
        alg bool red = Trafficlight2.Mode.red;
        alg bool off = Trafficlight2.Mode.off;
        requirement invariant red and not Boombarrier1.open disables .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash;
        requirement invariant red and not Boombarrier2.open disables .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash;
        requirement invariant J32.Mode.off disables .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash;
        requirement invariant off and not J32.TimerReleaseSignal.finished disables .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash;
        requirement invariant .Tunnel.Traffictube2.Trafficlight2.Mode.c_off needs AccessTrafficlights.off;
        requirement invariant .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash needs red and AccessTrafficlights.off or off and AccessTrafficlights.red or AccessTrafficlights.flash;
        requirement invariant .Tunnel.Traffictube2.Trafficlight2.Mode.c_yellow needs AccessTrafficlights.red;
      end
      group RequirementsTrafficlight3:
        alg bool red = Trafficlight3.Mode.red;
        alg bool off = Trafficlight3.Mode.off;
        requirement invariant red and not Boombarrier1.open disables .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash;
        requirement invariant red and not Boombarrier2.open disables .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash;
        requirement invariant J32.Mode.off disables .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash;
        requirement invariant off and not J32.TimerReleaseSignal.finished disables .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash;
        requirement invariant .Tunnel.Traffictube2.Trafficlight3.Mode.c_off needs AccessTrafficlights.off;
        requirement invariant .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash needs red and AccessTrafficlights.off or off and AccessTrafficlights.red or AccessTrafficlights.flash;
        requirement invariant .Tunnel.Traffictube2.Trafficlight3.Mode.c_yellow needs AccessTrafficlights.red;
      end
      group RequirementsBroadcast1:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast2:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast3:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast4:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast5:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast6:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast7:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast8:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast9:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast10:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast11:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast12:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast13:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast14:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast15:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast16:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast17:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast18:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast19:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast20:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast21:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast22:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsBroadcast23:
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_message needs SwitchTimerAudio.on1 or ButtonMessage.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs EscapeDoorBroadcast.off or EscapeDoorBroadcast.suppressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_live needs ButtonLive.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.Broadcast1.c_suppressed needs SwitchTimerAudio.on2;
      end
      group RequirementsEscapeDoor1:
        alg bool routeIndicationAuto = EscapeDoor1.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor1.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor1.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor2:
        alg bool routeIndicationAuto = EscapeDoor2.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor2.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor2.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor3:
        alg bool routeIndicationAuto = EscapeDoor3.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor3.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor3.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor4:
        alg bool routeIndicationAuto = EscapeDoor4.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor4.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor4.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor5:
        alg bool routeIndicationAuto = EscapeDoor5.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor5.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor5.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor6:
        alg bool routeIndicationAuto = EscapeDoor6.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor6.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor6.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      group RequirementsEscapeDoor7:
        alg bool routeIndicationAuto = EscapeDoor7.ControlRouteIndication.Mode.auto;
        alg bool routeIndicationManual = EscapeDoor7.ControlRouteIndication.Mode.manual;
        alg bool buttonRouteIndicationOn = EscapeDoor7.ButtonRouteIndicationOn.Observer.pressed;
        requirement invariant .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_on needs routeIndicationAuto and ModeTraffictube.evacuation or routeIndicationManual and buttonRouteIndicationOn;
      end
      requirement invariant .Tunnel.Traffictube2.PopUp.Window.c_on needs ButtonEmergency.Observer.pressed or ModeTraffictube.operational;
      requirement invariant .Tunnel.Traffictube2.PopUp.Window.c_off needs ModeTraffictube.emergency or ModeTraffictube.support or PopUp.ButtonReject.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_operational needs ButtonOperational.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_emergency needs PopUp.ButtonAccept.Observer.pressed or PopUp.Timer.finished;
      requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_evacuationEmergency needs ButtonEmergency.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_support needs not ModeTraffictube.emergency;
      requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_evacuation needs ButtonEvacuation.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_maintenance needs ButtonMaintenance.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.AccessBoombarriers.c_open needs ControlBoombarriers.Mode.manual and ButtonOpenBoombarriers.Observer.pressed or ButtonPrimaryOpenTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.AccessBoombarriers.c_close needs ControlBoombarriers.Mode.manual and ButtonCloseBoombarriers.Observer.pressed or ButtonPrimaryCloseTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.AccessBoombarriers.c_closeUnconditionally needs ControlBoombarriers.Mode.manual and ButtonCloseUnconditionalBoombarriers.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.AccessBoombarriers.c_stop needs ControlBoombarriers.Mode.manual and ButtonStopBoombarriers.Observer.pressed or not AccessBoombarriers.closingUnconditionally;
      requirement invariant .Tunnel.Traffictube2.AccessTrafficlights.c_off needs ControlTrafficlights.Mode.manual and ButtonOffTrafficlights.Observer.pressed or ButtonPrimaryOffTrafficlights.Observer.pressed or ButtonPrimaryOpenTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.AccessTrafficlights.c_flash needs ControlTrafficlights.Mode.manual and ButtonFlashTrafficlights.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.AccessTrafficlights.c_red needs ControlTrafficlights.Mode.manual and ButtonRedTrafficlights.Observer.pressed or ButtonPrimaryRedTrafficlights.Observer.pressed or ButtonPrimaryCloseTraffictube.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.J32.Mode.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash;
      requirement invariant .Tunnel.Traffictube2.J32.Mode.c_off needs Trafficlight1.Mode.off;
      requirement invariant .Tunnel.Traffictube2.J32.Mode.c_off needs Trafficlight2.Mode.off;
      requirement invariant .Tunnel.Traffictube2.J32.Mode.c_off needs Trafficlight3.Mode.off;
      requirement invariant .Tunnel.Traffictube2.J32.Mode.c_off needs AccessTrafficlights.off;
      requirement invariant .Tunnel.Traffictube2.MatrixsignTrafficlight.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash or AccessTrafficlights.off and not Trafficlight1.Mode.off and not Trafficlight2.Mode.off and not Trafficlight3.Mode.off;
      requirement invariant .Tunnel.Traffictube2.MatrixsignUnpressed.c_on needs AccessTrafficlights.red or AccessTrafficlights.flash;
      requirement invariant .Tunnel.Traffictube2.VentilationDirection.c_againstDrivingDirection needs ControlVentilation.Mode.auto and ModeTraffictube.support or ControlVentilation.Mode.manual and ButtonVentilationAgainstDrivingDirection.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.VentilationDirection.c_drivingDirection needs ControlVentilation.Mode.auto and not ModeTraffictube.support or ControlVentilation.Mode.manual and ButtonVentilationDrivingDirection.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.Recorder.c_on needs ModeTraffictube.emergency or ModeTraffictube.evacuation or ModeTraffictube.support;
      requirement invariant .Tunnel.Traffictube2.SwitchTimerAudio.c_on needs ButtonEvacuation.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.SwitchTimerAudio.c_off needs not ModeTraffictube.evacuation;
      requirement invariant .Tunnel.Traffictube2.EscapeDoorBroadcast.c_on needs ControlEscapeDoorBroadcast.Mode.auto and SwitchTimerAudio.on2 or not ControlEscapeDoorBroadcast.Mode.auto and ButtonEscapeDoorBroadcastOn.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.EscapeDoorBroadcast.c_on needs Broadcast1.suppressed;
      requirement invariant .Tunnel.Traffictube2.EscapeDoorBroadcast.c_off needs ControlEscapeDoorBroadcast.Mode.auto and SwitchTimerAudio.off or not ControlEscapeDoorBroadcast.Mode.auto and ButtonEscapeDoorBroadcastOff.Observer.pressed;
      requirement invariant .Tunnel.Traffictube2.EscapeDoorBroadcast.c_suppressed needs ControlEscapeDoorBroadcast.Mode.auto and SwitchTimerAudio.on1;
    end
    group RequirementsPressure1:
      requirement invariant .Tunnel.MiddleTunnelChannel.Pressure1.c_left needs MiddleTunnelChannel.ControlPressure.Mode.auto and (Traffictube1.ModeTraffictube.standby or not Traffictube1.ModeTraffictube.operational and not Traffictube1.ModeTraffictube.support) or MiddleTunnelChannel.ControlPressure.Mode.manual and MiddleTunnelChannel.ButtonPressureLeft.Observer.pressed;
      requirement invariant .Tunnel.MiddleTunnelChannel.Pressure1.c_right needs MiddleTunnelChannel.ControlPressure.Mode.auto and (Traffictube2.ModeTraffictube.standby or not Traffictube2.ModeTraffictube.operational and not Traffictube2.ModeTraffictube.support) or MiddleTunnelChannel.ControlPressure.Mode.manual and MiddleTunnelChannel.ButtonPressureRight.Observer.pressed;
    end
    group RequirementsPressure2:
      requirement invariant .Tunnel.MiddleTunnelChannel.Pressure2.c_left needs MiddleTunnelChannel.ControlPressure.Mode.auto and (Traffictube1.ModeTraffictube.standby or not Traffictube1.ModeTraffictube.operational and not Traffictube1.ModeTraffictube.support) or MiddleTunnelChannel.ControlPressure.Mode.manual and MiddleTunnelChannel.ButtonPressureLeft.Observer.pressed;
      requirement invariant .Tunnel.MiddleTunnelChannel.Pressure2.c_right needs MiddleTunnelChannel.ControlPressure.Mode.auto and (Traffictube2.ModeTraffictube.standby or not Traffictube2.ModeTraffictube.operational and not Traffictube2.ModeTraffictube.support) or MiddleTunnelChannel.ControlPressure.Mode.manual and MiddleTunnelChannel.ButtonPressureRight.Observer.pressed;
    end
    group RequirementsMiddleDrainCellar:
      alg bool control_auto = MiddleDrainCellar.Control.Mode.auto;
      alg bool control_manual = MiddleDrainCellar.Control.Mode.manual;
      alg bool button_store = MiddleDrainCellar.ButtonStoring.Observer.pressed;
      alg bool button_off = MiddleDrainCellar.ButtonOff.Observer.pressed;
      requirement invariant .Tunnel.MiddleDrainCellar.Regime.c_store needs control_auto and (Traffictube1.ModeTraffictube.emergency or Traffictube1.ModeTraffictube.evacuation or Traffictube1.ModeTraffictube.recovery or Traffictube2.ModeTraffictube.emergency or Traffictube2.ModeTraffictube.evacuation or Traffictube2.ModeTraffictube.recovery) or control_manual and button_store;
      requirement invariant .Tunnel.MiddleDrainCellar.Regime.c_off needs control_manual and button_off;
    end
    group RequirementsHeadDrainCellar1:
      alg bool control_auto = HeadDrainCellar1.Control.Mode.auto;
      alg bool control_manual = HeadDrainCellar1.Control.Mode.manual;
      alg bool button_store = HeadDrainCellar1.ButtonStoring.Observer.pressed;
      alg bool button_off = HeadDrainCellar1.ButtonOff.Observer.pressed;
      requirement invariant .Tunnel.HeadDrainCellar1.Regime.c_store needs control_auto and (Traffictube1.ModeTraffictube.emergency or Traffictube1.ModeTraffictube.evacuation or Traffictube1.ModeTraffictube.recovery or Traffictube2.ModeTraffictube.emergency or Traffictube2.ModeTraffictube.evacuation or Traffictube2.ModeTraffictube.recovery) or control_manual and button_store;
      requirement invariant .Tunnel.HeadDrainCellar1.Regime.c_off needs control_manual and button_off;
    end
    group RequirementsHeadDrainCellar2:
      alg bool control_auto = HeadDrainCellar2.Control.Mode.auto;
      alg bool control_manual = HeadDrainCellar2.Control.Mode.manual;
      alg bool button_store = HeadDrainCellar2.ButtonStoring.Observer.pressed;
      alg bool button_off = HeadDrainCellar2.ButtonOff.Observer.pressed;
      requirement invariant .Tunnel.HeadDrainCellar2.Regime.c_store needs control_auto and (Traffictube1.ModeTraffictube.emergency or Traffictube1.ModeTraffictube.evacuation or Traffictube1.ModeTraffictube.recovery or Traffictube2.ModeTraffictube.emergency or Traffictube2.ModeTraffictube.evacuation or Traffictube2.ModeTraffictube.recovery) or control_manual and button_store;
      requirement invariant .Tunnel.HeadDrainCellar2.Regime.c_off needs control_manual and button_off;
    end
    requirement invariant Traffictube1.ModeTraffictube.emergency disables .Tunnel.Traffictube2.ModeTraffictube.c_standby;
    requirement invariant Traffictube1.ModeTraffictube.emergency disables .Tunnel.Traffictube2.ModeTraffictube.c_emergency;
    requirement invariant Traffictube2.ModeTraffictube.emergency disables .Tunnel.Traffictube1.ModeTraffictube.c_standby;
    requirement invariant Traffictube2.ModeTraffictube.emergency disables .Tunnel.Traffictube1.ModeTraffictube.c_emergency;
    requirement invariant Traffictube1.ModeTraffictube.evacuation disables .Tunnel.Traffictube2.ModeTraffictube.c_standby;
    requirement invariant Traffictube1.ModeTraffictube.evacuation disables .Tunnel.Traffictube2.ModeTraffictube.c_emergency;
    requirement invariant Traffictube2.ModeTraffictube.evacuation disables .Tunnel.Traffictube1.ModeTraffictube.c_standby;
    requirement invariant Traffictube2.ModeTraffictube.evacuation disables .Tunnel.Traffictube1.ModeTraffictube.c_emergency;
    requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_support needs Traffictube2.ModeTraffictube.emergency or Traffictube2.ModeTraffictube.evacuation;
    requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_support needs Traffictube1.ModeTraffictube.emergency or Traffictube1.ModeTraffictube.evacuation;
    requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_evacuation needs Traffictube2.ModeTraffictube.support;
    requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_evacuation needs Traffictube1.ModeTraffictube.support;
    requirement invariant .Tunnel.Traffictube1.ModeTraffictube.c_recovery needs Traffictube1.ModeTraffictube.emergency and Traffictube1.ButtonRecovery.Observer.pressed or Traffictube1.ModeTraffictube.support and Traffictube2.ModeTraffictube.recovery or Traffictube1.ModeTraffictube.maintenance and Traffictube1.ButtonRecovery.Observer.pressed;
    requirement invariant .Tunnel.Traffictube2.ModeTraffictube.c_recovery needs Traffictube2.ModeTraffictube.emergency and Traffictube2.ButtonRecovery.Observer.pressed or Traffictube2.ModeTraffictube.support and Traffictube1.ModeTraffictube.recovery or Traffictube2.ModeTraffictube.maintenance and Traffictube2.ButtonRecovery.Observer.pressed;
    requirement invariant .Tunnel.BroadcastButtons1.c_evacuation needs Traffictube1.SwitchTimerAudio.on1;
    requirement invariant .Tunnel.MiddleTunnelChannel.Lighting.c_on needs MiddleTunnelChannel.ControlLighting.Mode.auto and (Traffictube1.ModeTraffictube.standby or Traffictube1.ModeTraffictube.emergency or Traffictube1.ModeTraffictube.evacuation or Traffictube2.ModeTraffictube.standby or Traffictube2.ModeTraffictube.emergency or Traffictube2.ModeTraffictube.evacuation) or MiddleTunnelChannel.ControlLighting.Mode.manual and MiddleTunnelChannel.ButtonLightingOn.Observer.pressed;
    requirement invariant .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_upward needs MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.auto and Traffictube1.ModeTraffictube.evacuation or MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.manual and MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.pressed;
    requirement invariant .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_downward needs MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.auto and Traffictube2.ModeTraffictube.evacuation or MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.manual and MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.pressed;
    requirement invariant .Tunnel.MiddleTunnelChannel.Broadcast.c_on needs Traffictube1.ModeTraffictube.evacuation and Traffictube1.SwitchTimerAudio.on1 or Traffictube2.ModeTraffictube.evacuation and Traffictube2.SwitchTimerAudio.on1;
    requirement invariant .Tunnel.MiddleTunnelChannel.Broadcast.c_onManual needs MiddleTunnelChannel.ButtonStartMessage.Observer.pressed;
    requirement invariant .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressed needs Traffictube1.SwitchTimerAudio.on2 or Traffictube2.SwitchTimerAudio.on2;
    requirement invariant .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressedManual needs MiddleTunnelChannel.ButtonStopMessage.Observer.pressed;
    requirement invariant .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar2 needs HeadDrainCellar1.Sensor5.on;
  end
  supervisor automaton sup:
    alphabet .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_on, .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_off, .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_offEmergency, .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on, .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_off, .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_offEmergency, .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_on, .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_off, .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_offEmergency, .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on, .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_off, .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_offEmergency, .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_manual, .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_auto, .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.ButtonStopBoombarriers.Observer.c_done, .Tunnel.Traffictube1.ButtonStopBoombarriers.Observer.c_cancel, .Tunnel.Traffictube1.ButtonOpenBoombarriers.Observer.c_done, .Tunnel.Traffictube1.ButtonOpenBoombarriers.Observer.c_cancel, .Tunnel.Traffictube1.ButtonCloseBoombarriers.Observer.c_done, .Tunnel.Traffictube1.ButtonCloseBoombarriers.Observer.c_cancel, .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Observer.c_done, .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Observer.c_cancel, .Tunnel.Traffictube1.AccessBoombarriers.c_open, .Tunnel.Traffictube1.AccessBoombarriers.c_close, .Tunnel.Traffictube1.ModeTraffictube.c_emergency, .Tunnel.Traffictube1.ModeTraffictube.c_support, .Tunnel.Traffictube1.AccessBoombarriers.c_closeUnconditionally, .Tunnel.Traffictube1.AccessBoombarriers.c_stop, .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash, .Tunnel.Traffictube1.Trafficlight1.Mode.c_off, .Tunnel.Traffictube1.Trafficlight1.Mode.c_yellow, .Tunnel.Traffictube1.Trafficlight1.Mode.c_red, .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_on, .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_reset, .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash, .Tunnel.Traffictube1.Trafficlight2.Mode.c_off, .Tunnel.Traffictube1.Trafficlight2.Mode.c_yellow, .Tunnel.Traffictube1.Trafficlight2.Mode.c_red, .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_on, .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_reset, .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash, .Tunnel.Traffictube1.Trafficlight3.Mode.c_off, .Tunnel.Traffictube1.Trafficlight3.Mode.c_yellow, .Tunnel.Traffictube1.Trafficlight3.Mode.c_red, .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_on, .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_reset, .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_manual, .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_auto, .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.ButtonRedTrafficlights.Observer.c_done, .Tunnel.Traffictube1.ButtonRedTrafficlights.Observer.c_cancel, .Tunnel.Traffictube1.ButtonFlashTrafficlights.Observer.c_done, .Tunnel.Traffictube1.ButtonFlashTrafficlights.Observer.c_cancel, .Tunnel.Traffictube1.ButtonOffTrafficlights.Observer.c_done, .Tunnel.Traffictube1.ButtonOffTrafficlights.Observer.c_cancel, .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Observer.c_done, .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Observer.c_cancel, .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Observer.c_done, .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Observer.c_cancel, .Tunnel.Traffictube1.AccessTrafficlights.c_red, .Tunnel.Traffictube1.AccessTrafficlights.c_flash, .Tunnel.Traffictube1.AccessTrafficlights.c_off, .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Observer.c_done, .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Observer.c_cancel, .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Observer.c_done, .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Observer.c_cancel, .Tunnel.Traffictube1.J32.Mode.c_on, .Tunnel.Traffictube1.J32.Mode.c_off, .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_on, .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_reset, .Tunnel.Traffictube1.MatrixsignTrafficlight.c_on, .Tunnel.Traffictube1.MatrixsignTrafficlight.c_off, .Tunnel.Traffictube1.MatrixsignUnpressed.c_on, .Tunnel.Traffictube1.MatrixsignUnpressed.c_off, .Tunnel.Traffictube1.Ventilation1.c_0, .Tunnel.Traffictube1.Ventilation1.c_1, .Tunnel.Traffictube1.Ventilation1.c_2, .Tunnel.Traffictube1.Ventilation1.c_3, .Tunnel.Traffictube1.Ventilation1.c_4, .Tunnel.Traffictube1.Ventilation1.c_5, .Tunnel.Traffictube1.Ventilation1.c_6, .Tunnel.Traffictube1.Ventilation1.c_7, .Tunnel.Traffictube1.Ventilation1.c_8, .Tunnel.Traffictube1.VentilationDirection.c_againstDrivingDirection, .Tunnel.Traffictube1.VentilationDirection.c_drivingDirection, .Tunnel.Traffictube1.ControlVentilation.Mode.c_manual, .Tunnel.Traffictube1.ControlVentilation.Mode.c_auto, .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Observer.c_done, .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Observer.c_cancel, .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Observer.c_done, .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Observer.c_cancel, .Tunnel.Traffictube1.ButtonVentilation0.Observer.c_done, .Tunnel.Traffictube1.ButtonVentilation0.Observer.c_cancel, .Tunnel.Traffictube1.ButtonVentilation1.Observer.c_done, .Tunnel.Traffictube1.ButtonVentilation1.Observer.c_cancel, .Tunnel.Traffictube1.Recorder.c_on, .Tunnel.Traffictube1.Recorder.c_off, .Tunnel.Traffictube1.Broadcast1.c_live, .Tunnel.Traffictube1.Broadcast1.c_suppressed, .Tunnel.Traffictube1.Broadcast1.c_message, .Tunnel.Traffictube1.SwitchTimerAudio.c_on, .Tunnel.Traffictube1.SwitchTimerAudio.c_off, .Tunnel.Traffictube1.ButtonMessage.Observer.c_done, .Tunnel.Traffictube1.ButtonMessage.Observer.c_cancel, .Tunnel.Traffictube1.ButtonLive.Observer.c_done, .Tunnel.Traffictube1.ButtonLive.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_on, .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_off, .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube1.EscapeDoorBroadcast.c_on, .Tunnel.Traffictube1.EscapeDoorBroadcast.c_suppressed, .Tunnel.Traffictube1.EscapeDoorBroadcast.c_off, .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_manual, .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_auto, .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_done, .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_done, .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Observer.c_done, .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Observer.c_cancel, .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Observer.c_done, .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Observer.c_cancel, .Tunnel.Traffictube1.ModeTraffictube.c_standby, .Tunnel.Traffictube1.ModeTraffictube.c_maintenance, .Tunnel.Traffictube1.ModeTraffictube.c_operational, .Tunnel.Traffictube1.ModeTraffictube.c_recovery, .Tunnel.Traffictube1.ModeTraffictube.c_evacuation, .Tunnel.Traffictube1.ModeTraffictube.c_evacuationEmergency, .Tunnel.Traffictube1.PopUp.Window.c_on, .Tunnel.Traffictube1.PopUp.Window.c_off, .Tunnel.Traffictube1.PopUp.Timer.c_on, .Tunnel.Traffictube1.PopUp.Timer.c_reset, .Tunnel.Traffictube1.PopUp.ButtonAccept.Observer.c_done, .Tunnel.Traffictube1.PopUp.ButtonAccept.Observer.c_cancel, .Tunnel.Traffictube1.PopUp.ButtonReject.Observer.c_done, .Tunnel.Traffictube1.PopUp.ButtonReject.Observer.c_cancel, .Tunnel.Traffictube1.ButtonOperational.Observer.c_done, .Tunnel.Traffictube1.ButtonOperational.Observer.c_cancel, .Tunnel.Traffictube1.ButtonEmergency.Observer.c_done, .Tunnel.Traffictube1.ButtonEmergency.Observer.c_cancel, .Tunnel.Traffictube1.ButtonEvacuation.Observer.c_done, .Tunnel.Traffictube1.ButtonEvacuation.Observer.c_cancel, .Tunnel.Traffictube1.ButtonRecovery.Observer.c_done, .Tunnel.Traffictube1.ButtonRecovery.Observer.c_cancel, .Tunnel.Traffictube1.ButtonMaintenance.Observer.c_done, .Tunnel.Traffictube1.ButtonMaintenance.Observer.c_cancel, .Tunnel.BroadcastButtons1.c_evacuation, .Tunnel.BroadcastButtons1.c_off, .Tunnel.HeadDrainCellar1.Pump1.c_on, .Tunnel.HeadDrainCellar1.Pump1.c_off, .Tunnel.HeadDrainCellar1.Pump3.c_on, .Tunnel.HeadDrainCellar1.Pump3.c_off, .Tunnel.HeadDrainCellar1.Regime.c_store, .Tunnel.HeadDrainCellar1.Regime.c_off, .Tunnel.HeadDrainCellar1.Regime.c_empty, .Tunnel.HeadDrainCellar1.Control.Mode.c_manual, .Tunnel.HeadDrainCellar1.Control.Mode.c_auto, .Tunnel.HeadDrainCellar1.Control.ButtonManual.Observer.c_done, .Tunnel.HeadDrainCellar1.Control.ButtonManual.Observer.c_cancel, .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Observer.c_done, .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Observer.c_cancel, .Tunnel.HeadDrainCellar1.ButtonStoring.Observer.c_done, .Tunnel.HeadDrainCellar1.ButtonStoring.Observer.c_cancel, .Tunnel.HeadDrainCellar1.ButtonEmptying.Observer.c_done, .Tunnel.HeadDrainCellar1.ButtonEmptying.Observer.c_cancel, .Tunnel.HeadDrainCellar1.ButtonOff.Observer.c_done, .Tunnel.HeadDrainCellar1.ButtonOff.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_manual, .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_auto, .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Observer.c_done, .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Observer.c_done, .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.Pressure1.c_left, .Tunnel.MiddleTunnelChannel.Pressure1.c_right, .Tunnel.MiddleTunnelChannel.Pressure1.c_off, .Tunnel.MiddleTunnelChannel.Pressure2.c_left, .Tunnel.MiddleTunnelChannel.Pressure2.c_right, .Tunnel.MiddleTunnelChannel.Pressure2.c_off, .Tunnel.MiddleTunnelChannel.Lighting.c_on, .Tunnel.MiddleTunnelChannel.Lighting.c_off, .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_manual, .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_auto, .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Observer.c_done, .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Observer.c_done, .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_upward, .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_downward, .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_off, .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_manual, .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_auto, .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Observer.c_done, .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Observer.c_done, .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.Broadcast.c_on, .Tunnel.MiddleTunnelChannel.Broadcast.c_onManual, .Tunnel.MiddleTunnelChannel.Broadcast.c_off, .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressed, .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressedManual, .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Observer.c_cancel, .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Observer.c_done, .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Observer.c_cancel, .Tunnel.MiddleDrainCellar.Pump1.c_on, .Tunnel.MiddleDrainCellar.Pump1.c_off, .Tunnel.MiddleDrainCellar.Pump2.c_on, .Tunnel.MiddleDrainCellar.Pump2.c_off, .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar2, .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar1, .Tunnel.MiddleDrainCellar.Regime.c_store, .Tunnel.MiddleDrainCellar.Regime.c_off, .Tunnel.MiddleDrainCellar.Regime.c_empty, .Tunnel.MiddleDrainCellar.Control.Mode.c_manual, .Tunnel.MiddleDrainCellar.Control.Mode.c_auto, .Tunnel.MiddleDrainCellar.Control.ButtonManual.Observer.c_done, .Tunnel.MiddleDrainCellar.Control.ButtonManual.Observer.c_cancel, .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Observer.c_done, .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Observer.c_cancel, .Tunnel.MiddleDrainCellar.ButtonStoring.Observer.c_done, .Tunnel.MiddleDrainCellar.ButtonStoring.Observer.c_cancel, .Tunnel.MiddleDrainCellar.ButtonEmptying.Observer.c_done, .Tunnel.MiddleDrainCellar.ButtonEmptying.Observer.c_cancel, .Tunnel.MiddleDrainCellar.ButtonOff.Observer.c_done, .Tunnel.MiddleDrainCellar.ButtonOff.Observer.c_cancel, .Tunnel.HeadDrainCellar2.Pump1.c_on, .Tunnel.HeadDrainCellar2.Pump1.c_off, .Tunnel.HeadDrainCellar2.Pump3.c_on, .Tunnel.HeadDrainCellar2.Pump3.c_off, .Tunnel.HeadDrainCellar2.Regime.c_store, .Tunnel.HeadDrainCellar2.Regime.c_off, .Tunnel.HeadDrainCellar2.Regime.c_empty, .Tunnel.HeadDrainCellar2.Control.Mode.c_manual, .Tunnel.HeadDrainCellar2.Control.Mode.c_auto, .Tunnel.HeadDrainCellar2.Control.ButtonManual.Observer.c_done, .Tunnel.HeadDrainCellar2.Control.ButtonManual.Observer.c_cancel, .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Observer.c_done, .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Observer.c_cancel, .Tunnel.HeadDrainCellar2.ButtonStoring.Observer.c_done, .Tunnel.HeadDrainCellar2.ButtonStoring.Observer.c_cancel, .Tunnel.HeadDrainCellar2.ButtonEmptying.Observer.c_done, .Tunnel.HeadDrainCellar2.ButtonEmptying.Observer.c_cancel, .Tunnel.HeadDrainCellar2.ButtonOff.Observer.c_done, .Tunnel.HeadDrainCellar2.ButtonOff.Observer.c_cancel, .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_on, .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_off, .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_offEmergency, .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on, .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_off, .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_offEmergency, .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_on, .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_off, .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_offEmergency, .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on, .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_off, .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_offEmergency, .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_manual, .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_auto, .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.ButtonStopBoombarriers.Observer.c_done, .Tunnel.Traffictube2.ButtonStopBoombarriers.Observer.c_cancel, .Tunnel.Traffictube2.ButtonOpenBoombarriers.Observer.c_done, .Tunnel.Traffictube2.ButtonOpenBoombarriers.Observer.c_cancel, .Tunnel.Traffictube2.ButtonCloseBoombarriers.Observer.c_done, .Tunnel.Traffictube2.ButtonCloseBoombarriers.Observer.c_cancel, .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Observer.c_done, .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Observer.c_cancel, .Tunnel.Traffictube2.AccessBoombarriers.c_open, .Tunnel.Traffictube2.AccessBoombarriers.c_close, .Tunnel.Traffictube2.ModeTraffictube.c_emergency, .Tunnel.Traffictube2.ModeTraffictube.c_support, .Tunnel.Traffictube2.AccessBoombarriers.c_closeUnconditionally, .Tunnel.Traffictube2.AccessBoombarriers.c_stop, .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash, .Tunnel.Traffictube2.Trafficlight1.Mode.c_off, .Tunnel.Traffictube2.Trafficlight1.Mode.c_yellow, .Tunnel.Traffictube2.Trafficlight1.Mode.c_red, .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_on, .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_reset, .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash, .Tunnel.Traffictube2.Trafficlight2.Mode.c_off, .Tunnel.Traffictube2.Trafficlight2.Mode.c_yellow, .Tunnel.Traffictube2.Trafficlight2.Mode.c_red, .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_on, .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_reset, .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash, .Tunnel.Traffictube2.Trafficlight3.Mode.c_off, .Tunnel.Traffictube2.Trafficlight3.Mode.c_yellow, .Tunnel.Traffictube2.Trafficlight3.Mode.c_red, .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_on, .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_reset, .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_manual, .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_auto, .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.ButtonRedTrafficlights.Observer.c_done, .Tunnel.Traffictube2.ButtonRedTrafficlights.Observer.c_cancel, .Tunnel.Traffictube2.ButtonFlashTrafficlights.Observer.c_done, .Tunnel.Traffictube2.ButtonFlashTrafficlights.Observer.c_cancel, .Tunnel.Traffictube2.ButtonOffTrafficlights.Observer.c_done, .Tunnel.Traffictube2.ButtonOffTrafficlights.Observer.c_cancel, .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Observer.c_done, .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Observer.c_cancel, .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Observer.c_done, .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Observer.c_cancel, .Tunnel.Traffictube2.AccessTrafficlights.c_red, .Tunnel.Traffictube2.AccessTrafficlights.c_flash, .Tunnel.Traffictube2.AccessTrafficlights.c_off, .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Observer.c_done, .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Observer.c_cancel, .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Observer.c_done, .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Observer.c_cancel, .Tunnel.Traffictube2.J32.Mode.c_on, .Tunnel.Traffictube2.J32.Mode.c_off, .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_on, .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_reset, .Tunnel.Traffictube2.MatrixsignTrafficlight.c_on, .Tunnel.Traffictube2.MatrixsignTrafficlight.c_off, .Tunnel.Traffictube2.MatrixsignUnpressed.c_on, .Tunnel.Traffictube2.MatrixsignUnpressed.c_off, .Tunnel.Traffictube2.Ventilation1.c_0, .Tunnel.Traffictube2.Ventilation1.c_1, .Tunnel.Traffictube2.Ventilation1.c_2, .Tunnel.Traffictube2.Ventilation1.c_3, .Tunnel.Traffictube2.Ventilation1.c_4, .Tunnel.Traffictube2.Ventilation1.c_5, .Tunnel.Traffictube2.Ventilation1.c_6, .Tunnel.Traffictube2.Ventilation1.c_7, .Tunnel.Traffictube2.Ventilation1.c_8, .Tunnel.Traffictube2.VentilationDirection.c_againstDrivingDirection, .Tunnel.Traffictube2.VentilationDirection.c_drivingDirection, .Tunnel.Traffictube2.ControlVentilation.Mode.c_manual, .Tunnel.Traffictube2.ControlVentilation.Mode.c_auto, .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Observer.c_done, .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Observer.c_cancel, .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Observer.c_done, .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Observer.c_cancel, .Tunnel.Traffictube2.ButtonVentilation0.Observer.c_done, .Tunnel.Traffictube2.ButtonVentilation0.Observer.c_cancel, .Tunnel.Traffictube2.ButtonVentilation1.Observer.c_done, .Tunnel.Traffictube2.ButtonVentilation1.Observer.c_cancel, .Tunnel.Traffictube2.Recorder.c_on, .Tunnel.Traffictube2.Recorder.c_off, .Tunnel.Traffictube2.Broadcast1.c_live, .Tunnel.Traffictube2.Broadcast1.c_suppressed, .Tunnel.Traffictube2.Broadcast1.c_message, .Tunnel.Traffictube2.SwitchTimerAudio.c_on, .Tunnel.Traffictube2.SwitchTimerAudio.c_off, .Tunnel.Traffictube2.ButtonMessage.Observer.c_done, .Tunnel.Traffictube2.ButtonMessage.Observer.c_cancel, .Tunnel.Traffictube2.ButtonLive.Observer.c_done, .Tunnel.Traffictube2.ButtonLive.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_on, .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_off, .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_manual, .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_auto, .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_done, .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_cancel, .Tunnel.Traffictube2.EscapeDoorBroadcast.c_on, .Tunnel.Traffictube2.EscapeDoorBroadcast.c_suppressed, .Tunnel.Traffictube2.EscapeDoorBroadcast.c_off, .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_manual, .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_auto, .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_done, .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_cancel, .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_done, .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_cancel, .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Observer.c_done, .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Observer.c_cancel, .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Observer.c_done, .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Observer.c_cancel, .Tunnel.Traffictube2.ModeTraffictube.c_standby, .Tunnel.Traffictube2.ModeTraffictube.c_maintenance, .Tunnel.Traffictube2.ModeTraffictube.c_operational, .Tunnel.Traffictube2.ModeTraffictube.c_recovery, .Tunnel.Traffictube2.ModeTraffictube.c_evacuation, .Tunnel.Traffictube2.ModeTraffictube.c_evacuationEmergency, .Tunnel.Traffictube2.PopUp.Window.c_on, .Tunnel.Traffictube2.PopUp.Window.c_off, .Tunnel.Traffictube2.PopUp.Timer.c_on, .Tunnel.Traffictube2.PopUp.Timer.c_reset, .Tunnel.Traffictube2.PopUp.ButtonAccept.Observer.c_done, .Tunnel.Traffictube2.PopUp.ButtonAccept.Observer.c_cancel, .Tunnel.Traffictube2.PopUp.ButtonReject.Observer.c_done, .Tunnel.Traffictube2.PopUp.ButtonReject.Observer.c_cancel, .Tunnel.Traffictube2.ButtonOperational.Observer.c_done, .Tunnel.Traffictube2.ButtonOperational.Observer.c_cancel, .Tunnel.Traffictube2.ButtonEmergency.Observer.c_done, .Tunnel.Traffictube2.ButtonEmergency.Observer.c_cancel, .Tunnel.Traffictube2.ButtonEvacuation.Observer.c_done, .Tunnel.Traffictube2.ButtonEvacuation.Observer.c_cancel, .Tunnel.Traffictube2.ButtonRecovery.Observer.c_done, .Tunnel.Traffictube2.ButtonRecovery.Observer.c_cancel, .Tunnel.Traffictube2.ButtonMaintenance.Observer.c_done, .Tunnel.Traffictube2.ButtonMaintenance.Observer.c_cancel;
    location:
      initial;
      marked;
      edge .Tunnel.BroadcastButtons1.c_evacuation when true;
      edge .Tunnel.BroadcastButtons1.c_off when true;
      edge .Tunnel.HeadDrainCellar1.ButtonEmptying.Observer.c_cancel when true;
      edge .Tunnel.HeadDrainCellar1.ButtonEmptying.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar1.ButtonOff.Observer.c_cancel when true;
      edge .Tunnel.HeadDrainCellar1.ButtonOff.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar1.ButtonStoring.Observer.c_cancel when true;
      edge .Tunnel.HeadDrainCellar1.ButtonStoring.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.HeadDrainCellar1.Control.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar1.Control.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.HeadDrainCellar1.Control.ButtonManual.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar1.Control.Mode.c_auto when true;
      edge .Tunnel.HeadDrainCellar1.Control.Mode.c_manual when true;
      edge .Tunnel.HeadDrainCellar1.Pump1.c_off when true;
      edge .Tunnel.HeadDrainCellar1.Pump1.c_on when true;
      edge .Tunnel.HeadDrainCellar1.Pump3.c_off when true;
      edge .Tunnel.HeadDrainCellar1.Pump3.c_on when true;
      edge .Tunnel.HeadDrainCellar1.Regime.c_empty when true;
      edge .Tunnel.HeadDrainCellar1.Regime.c_off when true;
      edge .Tunnel.HeadDrainCellar1.Regime.c_store when true;
      edge .Tunnel.HeadDrainCellar2.ButtonEmptying.Observer.c_cancel when true;
      edge .Tunnel.HeadDrainCellar2.ButtonEmptying.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar2.ButtonOff.Observer.c_cancel when true;
      edge .Tunnel.HeadDrainCellar2.ButtonOff.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar2.ButtonStoring.Observer.c_cancel when true;
      edge .Tunnel.HeadDrainCellar2.ButtonStoring.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.HeadDrainCellar2.Control.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar2.Control.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.HeadDrainCellar2.Control.ButtonManual.Observer.c_done when true;
      edge .Tunnel.HeadDrainCellar2.Control.Mode.c_auto when true;
      edge .Tunnel.HeadDrainCellar2.Control.Mode.c_manual when true;
      edge .Tunnel.HeadDrainCellar2.Pump1.c_off when true;
      edge .Tunnel.HeadDrainCellar2.Pump1.c_on when true;
      edge .Tunnel.HeadDrainCellar2.Pump3.c_off when true;
      edge .Tunnel.HeadDrainCellar2.Pump3.c_on when true;
      edge .Tunnel.HeadDrainCellar2.Regime.c_empty when true;
      edge .Tunnel.HeadDrainCellar2.Regime.c_off when true;
      edge .Tunnel.HeadDrainCellar2.Regime.c_store when true;
      edge .Tunnel.MiddleDrainCellar.ButtonEmptying.Observer.c_cancel when true;
      edge .Tunnel.MiddleDrainCellar.ButtonEmptying.Observer.c_done when true;
      edge .Tunnel.MiddleDrainCellar.ButtonOff.Observer.c_cancel when true;
      edge .Tunnel.MiddleDrainCellar.ButtonOff.Observer.c_done when true;
      edge .Tunnel.MiddleDrainCellar.ButtonStoring.Observer.c_cancel when true;
      edge .Tunnel.MiddleDrainCellar.ButtonStoring.Observer.c_done when true;
      edge .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.MiddleDrainCellar.Control.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.MiddleDrainCellar.Control.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.MiddleDrainCellar.Control.ButtonManual.Observer.c_done when true;
      edge .Tunnel.MiddleDrainCellar.Control.Mode.c_auto when true;
      edge .Tunnel.MiddleDrainCellar.Control.Mode.c_manual when true;
      edge .Tunnel.MiddleDrainCellar.Pump1.c_off when true;
      edge .Tunnel.MiddleDrainCellar.Pump1.c_on when true;
      edge .Tunnel.MiddleDrainCellar.Pump2.c_off when true;
      edge .Tunnel.MiddleDrainCellar.Pump2.c_on when true;
      edge .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar1 when true;
      edge .Tunnel.MiddleDrainCellar.PumpDirection.c_headDrainCellar2 when true;
      edge .Tunnel.MiddleDrainCellar.Regime.c_empty when true;
      edge .Tunnel.MiddleDrainCellar.Regime.c_off when true;
      edge .Tunnel.MiddleDrainCellar.Regime.c_store when true;
      edge .Tunnel.MiddleTunnelChannel.Broadcast.c_off when true;
      edge .Tunnel.MiddleTunnelChannel.Broadcast.c_on when true;
      edge .Tunnel.MiddleTunnelChannel.Broadcast.c_onManual when true;
      edge .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressed when true;
      edge .Tunnel.MiddleTunnelChannel.Broadcast.c_suppressedManual when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationDownward.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonDynamicEscaperouteIndicationUpward.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonLightingOff.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonLightingOn.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonPressureLeft.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonPressureOff.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Observer.c_cancel when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonPressureRight.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ButtonStartMessage.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ButtonStopMessage.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_auto when true;
      edge .Tunnel.MiddleTunnelChannel.ControlDynamicEscaperouteIndication.Mode.c_manual when true;
      edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ControlLighting.ButtonManual.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_auto when true;
      edge .Tunnel.MiddleTunnelChannel.ControlLighting.Mode.c_manual when true;
      edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.MiddleTunnelChannel.ControlPressure.ButtonManual.Observer.c_done when true;
      edge .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_auto when true;
      edge .Tunnel.MiddleTunnelChannel.ControlPressure.Mode.c_manual when true;
      edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_downward when true;
      edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_off when true;
      edge .Tunnel.MiddleTunnelChannel.DynamicEscaperouteIndication.c_upward when true;
      edge .Tunnel.MiddleTunnelChannel.Lighting.c_off when true;
      edge .Tunnel.MiddleTunnelChannel.Lighting.c_on when true;
      edge .Tunnel.MiddleTunnelChannel.Pressure1.c_left when true;
      edge .Tunnel.MiddleTunnelChannel.Pressure1.c_off when true;
      edge .Tunnel.MiddleTunnelChannel.Pressure1.c_right when true;
      edge .Tunnel.MiddleTunnelChannel.Pressure2.c_left when true;
      edge .Tunnel.MiddleTunnelChannel.Pressure2.c_off when true;
      edge .Tunnel.MiddleTunnelChannel.Pressure2.c_right when true;
      edge .Tunnel.Traffictube1.AccessBoombarriers.c_close when true;
      edge .Tunnel.Traffictube1.AccessBoombarriers.c_closeUnconditionally when true;
      edge .Tunnel.Traffictube1.AccessBoombarriers.c_open when true;
      edge .Tunnel.Traffictube1.AccessBoombarriers.c_stop when true;
      edge .Tunnel.Traffictube1.AccessTrafficlights.c_flash when true;
      edge .Tunnel.Traffictube1.AccessTrafficlights.c_off when true;
      edge .Tunnel.Traffictube1.AccessTrafficlights.c_red when true;
      edge .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_off when true;
      edge .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_offEmergency when true;
      edge .Tunnel.Traffictube1.Boombarrier1.ActuatorDown.c_on when true;
      edge .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_off when true;
      edge .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_offEmergency when true;
      edge .Tunnel.Traffictube1.Boombarrier1.ActuatorUp.c_on when true;
      edge .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_off when true;
      edge .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_offEmergency when true;
      edge .Tunnel.Traffictube1.Boombarrier2.ActuatorDown.c_on when true;
      edge .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_off when true;
      edge .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_offEmergency when true;
      edge .Tunnel.Traffictube1.Boombarrier2.ActuatorUp.c_on when true;
      edge .Tunnel.Traffictube1.Broadcast1.c_live when true;
      edge .Tunnel.Traffictube1.Broadcast1.c_message when true;
      edge .Tunnel.Traffictube1.Broadcast1.c_suppressed when true;
      edge .Tunnel.Traffictube1.ButtonCloseBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonCloseBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonCloseUnconditionalBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonEmergency.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonEmergency.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonEscapeDoorBroadcastOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonEvacuation.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonEvacuation.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonFlashTrafficlights.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonFlashTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonLive.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonLive.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonMaintenance.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonMaintenance.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonMessage.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonMessage.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonOffTrafficlights.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonOffTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonOpenBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonOpenBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonOperational.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonOperational.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonPrimaryCloseTraffictube.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonPrimaryOffTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonPrimaryOpenTraffictube.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonPrimaryRedTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonRecovery.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ButtonRecovery.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonRedTrafficlights.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonRedTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonStopBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonStopBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonVentilation0.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonVentilation0.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonVentilation1.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonVentilation1.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonVentilationAgainstDrivingDirection.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.ButtonVentilationDrivingDirection.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlBoombarriers.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.ControlBoombarriers.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.ControlEscapeDoorBroadcast.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlTrafficlights.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.ControlTrafficlights.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlVentilation.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.ControlVentilation.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.ControlVentilation.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.ControlVentilation.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor1.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor2.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor3.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor4.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor5.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor6.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoor7.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_off when true;
      edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_on when true;
      edge .Tunnel.Traffictube1.EscapeDoorBroadcast.c_suppressed when true;
      edge .Tunnel.Traffictube1.J32.Mode.c_off when true;
      edge .Tunnel.Traffictube1.J32.Mode.c_on when true;
      edge .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube1.J32.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube1.MatrixsignTrafficlight.c_off when true;
      edge .Tunnel.Traffictube1.MatrixsignTrafficlight.c_on when true;
      edge .Tunnel.Traffictube1.MatrixsignUnpressed.c_off when true;
      edge .Tunnel.Traffictube1.MatrixsignUnpressed.c_on when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_emergency when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_evacuation when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_evacuationEmergency when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_maintenance when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_operational when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_recovery when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_standby when true;
      edge .Tunnel.Traffictube1.ModeTraffictube.c_support when true;
      edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.PopUp.ButtonAccept.Observer.c_done when true;
      edge .Tunnel.Traffictube1.PopUp.ButtonReject.Observer.c_cancel when false;
      edge .Tunnel.Traffictube1.PopUp.ButtonReject.Observer.c_done when true;
      edge .Tunnel.Traffictube1.PopUp.Timer.c_on when true;
      edge .Tunnel.Traffictube1.PopUp.Timer.c_reset when true;
      edge .Tunnel.Traffictube1.PopUp.Window.c_off when true;
      edge .Tunnel.Traffictube1.PopUp.Window.c_on when true;
      edge .Tunnel.Traffictube1.Recorder.c_off when true;
      edge .Tunnel.Traffictube1.Recorder.c_on when true;
      edge .Tunnel.Traffictube1.SwitchTimerAudio.c_off when true;
      edge .Tunnel.Traffictube1.SwitchTimerAudio.c_on when true;
      edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_flash when true;
      edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_off when true;
      edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_red when true;
      edge .Tunnel.Traffictube1.Trafficlight1.Mode.c_yellow when true;
      edge .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube1.Trafficlight1.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_flash when true;
      edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_off when true;
      edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_red when true;
      edge .Tunnel.Traffictube1.Trafficlight2.Mode.c_yellow when true;
      edge .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube1.Trafficlight2.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_flash when true;
      edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_off when true;
      edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_red when true;
      edge .Tunnel.Traffictube1.Trafficlight3.Mode.c_yellow when true;
      edge .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube1.Trafficlight3.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_0 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_1 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_2 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_3 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_4 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_5 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_6 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_7 when true;
      edge .Tunnel.Traffictube1.Ventilation1.c_8 when true;
      edge .Tunnel.Traffictube1.VentilationDirection.c_againstDrivingDirection when true;
      edge .Tunnel.Traffictube1.VentilationDirection.c_drivingDirection when true;
      edge .Tunnel.Traffictube2.AccessBoombarriers.c_close when true;
      edge .Tunnel.Traffictube2.AccessBoombarriers.c_closeUnconditionally when true;
      edge .Tunnel.Traffictube2.AccessBoombarriers.c_open when true;
      edge .Tunnel.Traffictube2.AccessBoombarriers.c_stop when true;
      edge .Tunnel.Traffictube2.AccessTrafficlights.c_flash when true;
      edge .Tunnel.Traffictube2.AccessTrafficlights.c_off when true;
      edge .Tunnel.Traffictube2.AccessTrafficlights.c_red when true;
      edge .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_off when true;
      edge .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_offEmergency when true;
      edge .Tunnel.Traffictube2.Boombarrier1.ActuatorDown.c_on when true;
      edge .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_off when true;
      edge .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_offEmergency when true;
      edge .Tunnel.Traffictube2.Boombarrier1.ActuatorUp.c_on when true;
      edge .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_off when true;
      edge .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_offEmergency when true;
      edge .Tunnel.Traffictube2.Boombarrier2.ActuatorDown.c_on when true;
      edge .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_off when true;
      edge .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_offEmergency when true;
      edge .Tunnel.Traffictube2.Boombarrier2.ActuatorUp.c_on when true;
      edge .Tunnel.Traffictube2.Broadcast1.c_live when true;
      edge .Tunnel.Traffictube2.Broadcast1.c_message when true;
      edge .Tunnel.Traffictube2.Broadcast1.c_suppressed when true;
      edge .Tunnel.Traffictube2.ButtonCloseBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonCloseBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonCloseUnconditionalBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonEmergency.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonEmergency.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonEscapeDoorBroadcastOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonEvacuation.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonEvacuation.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonFlashTrafficlights.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonFlashTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonLive.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonLive.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonMaintenance.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonMaintenance.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonMessage.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonMessage.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonOffTrafficlights.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonOffTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonOpenBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonOpenBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonOperational.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonOperational.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonPrimaryCloseTraffictube.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonPrimaryOffTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonPrimaryOpenTraffictube.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonPrimaryRedTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonRecovery.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ButtonRecovery.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonRedTrafficlights.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonRedTrafficlights.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonStopBoombarriers.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonStopBoombarriers.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonVentilation0.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonVentilation0.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonVentilation1.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonVentilation1.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonVentilationAgainstDrivingDirection.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.ButtonVentilationDrivingDirection.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlBoombarriers.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.ControlBoombarriers.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.ControlEscapeDoorBroadcast.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlTrafficlights.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.ControlTrafficlights.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlVentilation.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.ControlVentilation.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.ControlVentilation.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.ControlVentilation.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor1.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor2.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor3.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor4.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor5.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor6.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOff.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_cancel when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ButtonRouteIndicationOn.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonAuto.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.ButtonManual.Observer.c_done when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_auto when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.ControlRouteIndication.Mode.c_manual when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoor7.RouteIndication.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_off when true;
      edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_on when true;
      edge .Tunnel.Traffictube2.EscapeDoorBroadcast.c_suppressed when true;
      edge .Tunnel.Traffictube2.J32.Mode.c_off when true;
      edge .Tunnel.Traffictube2.J32.Mode.c_on when true;
      edge .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube2.J32.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube2.MatrixsignTrafficlight.c_off when true;
      edge .Tunnel.Traffictube2.MatrixsignTrafficlight.c_on when true;
      edge .Tunnel.Traffictube2.MatrixsignUnpressed.c_off when true;
      edge .Tunnel.Traffictube2.MatrixsignUnpressed.c_on when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_emergency when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_evacuation when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_evacuationEmergency when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_maintenance when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_operational when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_recovery when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_standby when true;
      edge .Tunnel.Traffictube2.ModeTraffictube.c_support when true;
      edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.PopUp.ButtonAccept.Observer.c_done when true;
      edge .Tunnel.Traffictube2.PopUp.ButtonReject.Observer.c_cancel when false;
      edge .Tunnel.Traffictube2.PopUp.ButtonReject.Observer.c_done when true;
      edge .Tunnel.Traffictube2.PopUp.Timer.c_on when true;
      edge .Tunnel.Traffictube2.PopUp.Timer.c_reset when true;
      edge .Tunnel.Traffictube2.PopUp.Window.c_off when true;
      edge .Tunnel.Traffictube2.PopUp.Window.c_on when true;
      edge .Tunnel.Traffictube2.Recorder.c_off when true;
      edge .Tunnel.Traffictube2.Recorder.c_on when true;
      edge .Tunnel.Traffictube2.SwitchTimerAudio.c_off when true;
      edge .Tunnel.Traffictube2.SwitchTimerAudio.c_on when true;
      edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_flash when true;
      edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_off when true;
      edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_red when true;
      edge .Tunnel.Traffictube2.Trafficlight1.Mode.c_yellow when true;
      edge .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube2.Trafficlight1.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_flash when true;
      edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_off when true;
      edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_red when true;
      edge .Tunnel.Traffictube2.Trafficlight2.Mode.c_yellow when true;
      edge .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube2.Trafficlight2.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_flash when true;
      edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_off when true;
      edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_red when true;
      edge .Tunnel.Traffictube2.Trafficlight3.Mode.c_yellow when true;
      edge .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_on when true;
      edge .Tunnel.Traffictube2.Trafficlight3.TimerReleaseSignal.c_reset when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_0 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_1 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_2 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_3 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_4 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_5 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_6 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_7 when true;
      edge .Tunnel.Traffictube2.Ventilation1.c_8 when true;
      edge .Tunnel.Traffictube2.VentilationDirection.c_againstDrivingDirection when true;
      edge .Tunnel.Traffictube2.VentilationDirection.c_drivingDirection when true;
  end
end
